 
 
 
// <Template>
//   <SolutionTemplate>EF POCO 1</SolutionTemplate>
//   <Version>20140213.2136</Version>
//   <Update>mas de contextRequest</Update>
// </Template>
#region using
using System;
using System.Collections.Generic;
using System.Text;
using SFS.Core.BR;
using System.Linq.Dynamic.Core;
//using EntityFrameworkCore.DynamicLinq;
using System.Collections;
using System.Linq;
using LinqKit;
using SFS.Core.Entities;
using SFS.Core.Linq;
using System.Linq.Expressions;
using System.Data;

using SFSdotNet.Framework;
using SFS.Core.My;
//using System.Data.Entity.Core.Objects.DataClasses;
//using System.Data.Entity.Core.Objects;
using KS.Time.BusinessObjects;
//using KS.Time.BusinessObjects.EFPocoAdapter;

//using EFPocoAdapter;
using SFS.Core.Entities.Trackable;
using SFS.Core.Security.BR;
using EFCore.BulkExtensions;
using Microsoft.EntityFrameworkCore;
using System.Linq.Dynamic.Core;
using SFS.Core.Security.BusinessObjects;
//using EntityFrameworkCore.DynamicLinq;


#endregion
namespace KS.Time.BR
{

public partial class IntegrationAppsBR
    {
        partial void OnEmailValidationSending(EmailSendingEventArgs e);
           
         public void OnEmailValidationSendingEvent(EmailSendingEventArgs e)
        {
            this.OnEmailValidationSending(e);
        }

		 partial void OnGetting(IntegrationDataEventArgs e);
           
         public void OnGettingEvent(IntegrationDataEventArgs e)
        {
            this.OnGetting(e);
        }

		 partial void OnUserLoging(UserLoginEventArgs e);
           
         public void OnUserLogingEvent(UserLoginEventArgs e)
        {
            this.OnUserLoging(e);
        }


        partial void OnUserCreated(IntegrationDataEventArgs e);

        public void OnUserCreatedEvent(IntegrationDataEventArgs e)
        {
            this.OnUserCreated(e);
        }
        partial void OnRoleCreated(IntegrationDataEventArgs e);

        public void OnRoleCreatedEvent(IntegrationDataEventArgs e)
        {
            this.OnRoleCreated(e);
        }
        partial void OnUserCompanyCreated(IntegrationDataEventArgs e);

        public void OnUserCompanyCreatedEvent(IntegrationDataEventArgs e)
        {
            this.OnUserCompanyCreated(e);
        }

        partial void OnRoleUpdated(IntegrationDataEventArgs e);

        public void OnRoleUpdatedEvent(IntegrationDataEventArgs e)
        {
            this.OnRoleUpdated(e);
        }

        partial void OnUserUpdated(IntegrationDataEventArgs e);

        public void OnUserUpdatedEvent(IntegrationDataEventArgs e)
        {
            this.OnUserUpdated(e);
        }

		partial void OnUserCompanyUpdated(IntegrationDataEventArgs e);

        public void OnUserCompanyUpdatedEvent(IntegrationDataEventArgs e)
        {
            this.OnUserCompanyUpdated(e);
        }

		  partial void OnPasswordRecovery(UserLoginEventArgs e);

        public void OnPasswordRecoveryEvent(UserLoginEventArgs e)
        {
            this.OnPasswordRecovery(e);
        }


    }
public class SinglentonContext
    {
        private static EFContext context = null;
        public static EFContext Instance {
            get {
               if (context == null)
                    context = new EFContext();
                return context;
            }
        }
        /// <summary>
    /// Re-new the singlenton instance
    /// </summary>
    /// <returns></returns>
        public static EFContext RenewInstance() {
            context = new EFContext();
            return context;
        }
    /// <summary>
    /// Get a new instance
    /// </summary>
        public static EFContext NewInstance {
            get {
                return new EFContext();
            }
        }
    }
	
	
		public partial class KstEmailTemplatesBR:BRBase<KstEmailTemplate>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstEmailTemplate> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstEmailTemplate> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstEmailTemplate> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstEmailTemplate> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstEmailTemplate> e);
          
            #endregion
			
		private static KstEmailTemplatesBR singlenton =null;
				public static KstEmailTemplatesBR NewInstance(){
					return  new KstEmailTemplatesBR();
					
				}
		public static KstEmailTemplatesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstEmailTemplatesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstEmailTemplatesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstEmailTemplate";

            context = new EFContext();
        }
		 public KstEmailTemplatesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstEmailTemplate";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstEmailTemplate> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstEmailTemplates.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstEmailTemplate> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstEmailTemplate> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstEmailTemplate GetByKey(Guid guidEmailTemplate)
        {
            return GetByKey(guidEmailTemplate, true);
        }
        public KstEmailTemplate GetByKey(Guid guidEmailTemplate, bool loadIncludes)
        {
            KstEmailTemplate item = null;
			var query = PredicateBuilder.True<KstEmailTemplate>();
                    
			string strWhere = @"GuidEmailTemplate = Guid(""" + guidEmailTemplate.ToString()+@""")";
            Expression<Func<KstEmailTemplate, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstEmailTemplate, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstEmailTemplate> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstEmailTemplate> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstEmailTemplate GetByKey(Guid guidEmailTemplate, params Expression<Func<KstEmailTemplate, object>>[] includes)
        {
            KstEmailTemplate item = null;
			string strWhere = @"GuidEmailTemplate = Guid(""" + guidEmailTemplate.ToString()+@""")";
          Expression<Func<KstEmailTemplate, bool>> predicate = p=> p.GuidEmailTemplate == guidEmailTemplate;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstEmailTemplate, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstEmailTemplate GetByKey(Guid guidEmailTemplate, string includes)
        {
            KstEmailTemplate item = null;
			string strWhere = @"GuidEmailTemplate = Guid(""" + guidEmailTemplate.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstEmailTemplate GetByKey(Guid guidEmailTemplate, string usemode, string includes)
		{
			return GetByKey(guidEmailTemplate, usemode, null, includes);

		 }
		 public KstEmailTemplate GetByKey(Guid guidEmailTemplate, string usemode, ContextRequest context,  string includes)
        {
            KstEmailTemplate item = null;
			string strWhere = @"GuidEmailTemplate = Guid(""" + guidEmailTemplate.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstEmailTemplate, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstEmailTemplate>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate, params Expression<Func<KstEmailTemplate, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstEmailTemplate>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
										
					bool sharedAndMultiTenant = true;
					Expression<Func<KstEmailTemplate,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null)
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany ||  p.GuidCompany == null); //todo: multiempresa
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstEmailTemplate> result = null;
               BusinessRulesEventArgs<KstEmailTemplate>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstEmailTemplate>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstEmailTemplate>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstEmailTemplate>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstEmailTemplate>();
                
                //var es = _repository.Queryable;

                IQueryable<KstEmailTemplate> query =  con.KstEmailTemplates.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany ||  p.GuidCompany == null); //todo: multiempresa

 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstEmailTemplate>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstEmailTemplate>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstEmailTemplate>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstEmailTemplate> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstEmailTemplate>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
										
					bool sharedAndMultiTenant = true;

					string multitenantExpression = null;
					//if (contextRequest != null && contextRequest.Company != null)
						//multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""") || GuidCompany.HasValue == false)"; //todo: multiempresa
				if (contextRequest != null && contextRequest.Company != null)
				 {
                    multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant  OR GuidCompany.HasValue = false)";
                    contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
                }
				
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstEmailTemplate> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstEmailTemplate> result = new List<KstEmailTemplate>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstEmailTemplate>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstEmailTemplate>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstEmailTemplate>();
                
                //var es = _repository.Queryable;
				IQueryable<KstEmailTemplate> query = con.KstEmailTemplates.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""") || GuidCompany.HasValue == false)");


								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstEmailTemplate>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstEmailTemplate,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstEmailTemplate>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstEmailTemplate GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
										
					bool sharedAndMultiTenant = true;

					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant  OR GuidCompany.HasValue = false)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
			 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstEmailTemplate(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.Title);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.TitleKey);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.Content);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstEmailTemplate.PropertyNames.Bytes);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidEmailTemplate")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidEmailTemplate");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstEmailTemplates", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstEmailTemplate> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstEmailTemplate>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstEmailTemplate> result = new List<KstEmailTemplate>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstEmailTemplate> GetBy(Expression<Func<KstEmailTemplate, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"TitleKey.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"Content.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstEmailTemplate> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstEmailTemplate> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstEmailTemplate> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstEmailTemplate> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstEmailTemplate> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstEmailTemplate> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstEmailTemplate Create(KstEmailTemplate entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstEmailTemplate Create(KstEmailTemplate entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstEmailTemplate itemForSave = new KstEmailTemplate();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstEmailTemplate> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidEmailTemplate == Guid.Empty)
                   {
                       entity.GuidEmailTemplate = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidEmailTemplate = entity.GuidEmailTemplate;
				  
		
			itemForSave.GuidEmailTemplate = entity.GuidEmailTemplate;

			itemForSave.Title = entity.Title;

			itemForSave.TitleKey = entity.TitleKey;

			itemForSave.Content = entity.Content;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

				
				con.KstEmailTemplates.Add(itemForSave);


                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstEmailTemplate>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstEmailTemplate", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstEmailTemplate> e = null;
        public void Create(List<KstEmailTemplate> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstEmailTemplate> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstEmailTemplate entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstEmailTemplate> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstEmailTemplate> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidEmailTemplate == Guid.Empty)
                   {
                       entity.GuidEmailTemplate = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidEmailTemplate = entity.GuidEmailTemplate;

			//entity.Title = entity.Title;

			//entity.TitleKey = entity.TitleKey;

			//entity.Content = entity.Content;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				


                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstEmailTemplate> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstEmailTemplate item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstEmailTemplate item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstEmailTemplate> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstEmailTemplate>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstEmailTemplates", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstEmailTemplate>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstEmailTemplate>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstEmailTemplate> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstEmailTemplate() { GuidEmailTemplate = entity.GuidEmailTemplate };

                    con.Entry<KstEmailTemplate>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstEmailTemplate> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstEmailTemplate Update(KstEmailTemplate entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstEmailTemplate Update(KstEmailTemplate entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstEmailTemplate  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidEmailTemplate == entity.GuidEmailTemplate, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstEmailTemplate> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstEmailTemplatesBR br = new KstEmailTemplatesBR(true );
               // var oldentity = br.GetBy("GuidEmailTemplate = Guid(\"" + entity.GuidEmailTemplate + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstEmailTemplates.FirstOrDefault(p=> p.GuidEmailTemplate == entity.GuidEmailTemplate);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstEmailTemplates", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstEmailTemplate.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstEmailTemplate.PropertyNames.UpdatedBy);
				}

           

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstEmailTemplate Save(KstEmailTemplate entity)
        {
			return Create(entity);
        }
        public int Save(List<KstEmailTemplate> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstEmailTemplate entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstEmailTemplate entity, ContextRequest contextRequest)
        {
				
				  List<KstEmailTemplate> entities = new List<KstEmailTemplate>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstEmailTemplatesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstEmailTemplate entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstEmailTemplate> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstEmailTemplate> _e = null;
               List<KstEmailTemplate> _items = new List<KstEmailTemplate>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstEmailTemplate>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstEmailTemplatesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstEmailTemplate> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstEmailTemplate> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstEmailTemplate> eToChilds = new BusinessRulesEventArgs<KstEmailTemplate>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstEmailTemplate item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstEmailTemplate>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstEmailTemplate, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstEmailTemplate, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstEmailTemplate>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany || p.GuidCompany == null); //todo: multiempresa


								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstEmailTemplate> query = con.KstEmailTemplates.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstEmailTemplate>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
										
					bool sharedAndMultiTenant = true;

					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
				 {
                    multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant  OR GuidCompany.HasValue = false)";
                    contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
                }
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstEmailTemplate>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstEmailTemplate> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstEmailTemplate>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""") || GuidCompany.HasValue == false )"); //todo: multiempresa

						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstEmailTemplates.Where(predicate).Count();
					
                }else
                    return con.KstEmailTemplates.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstProxyGeoCitiesBR:BRBase<KstProxyGeoCity>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstProxyGeoCity> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstProxyGeoCity> e);
          
            #endregion
			
		private static KstProxyGeoCitiesBR singlenton =null;
				public static KstProxyGeoCitiesBR NewInstance(){
					return  new KstProxyGeoCitiesBR();
					
				}
		public static KstProxyGeoCitiesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstProxyGeoCitiesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstProxyGeoCitiesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstProxyGeoCity";

            context = new EFContext();
        }
		 public KstProxyGeoCitiesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstProxyGeoCity";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstProxyGeoCity> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstProxyGeoCities.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstProxyGeoCity> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstProxyGeoCity> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstProxyGeoCity GetByKey(Guid guidCity)
        {
            return GetByKey(guidCity, true);
        }
        public KstProxyGeoCity GetByKey(Guid guidCity, bool loadIncludes)
        {
            KstProxyGeoCity item = null;
			var query = PredicateBuilder.True<KstProxyGeoCity>();
                    
			string strWhere = @"GuidCity = Guid(""" + guidCity.ToString()+@""")";
            Expression<Func<KstProxyGeoCity, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyGeoCity, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstProxyGeoCity> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstProxyGeoCity> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstProxyGeoCity GetByKey(Guid guidCity, params Expression<Func<KstProxyGeoCity, object>>[] includes)
        {
            KstProxyGeoCity item = null;
			string strWhere = @"GuidCity = Guid(""" + guidCity.ToString()+@""")";
          Expression<Func<KstProxyGeoCity, bool>> predicate = p=> p.GuidCity == guidCity;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyGeoCity, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstProxyGeoCity GetByKey(Guid guidCity, string includes)
        {
            KstProxyGeoCity item = null;
			string strWhere = @"GuidCity = Guid(""" + guidCity.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstProxyGeoCity GetByKey(Guid guidCity, string usemode, string includes)
		{
			return GetByKey(guidCity, usemode, null, includes);

		 }
		 public KstProxyGeoCity GetByKey(Guid guidCity, string usemode, ContextRequest context,  string includes)
        {
            KstProxyGeoCity item = null;
			string strWhere = @"GuidCity = Guid(""" + guidCity.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstProxyGeoCity, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstProxyGeoCity>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate, params Expression<Func<KstProxyGeoCity, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstProxyGeoCity2,KstProxyGeoState";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCity>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					Expression<Func<KstProxyGeoCity,bool>> multitenantExpression = null;
 
                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstProxyGeoCity> result = null;
               BusinessRulesEventArgs<KstProxyGeoCity>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstProxyGeoCity>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstProxyGeoCity>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstProxyGeoCity>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCity>();
 				string fkIncludes = "KstProxyGeoCity2,KstProxyGeoState";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstProxyGeoCity> query =  con.KstProxyGeoCities.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstProxyGeoCity>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstProxyGeoCity>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstProxyGeoCity>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstProxyGeoCity> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstProxyGeoCity2,KstProxyGeoState";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCity>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstProxyGeoCity> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstProxyGeoCity> result = new List<KstProxyGeoCity>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoCity>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstProxyGeoCity>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCity>();
 				string fkIncludes = "KstProxyGeoCity2,KstProxyGeoState";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstProxyGeoCity> query = con.KstProxyGeoCities.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


				//string predicateString = predicate.ToDynamicLinq<KstProxyGeoCity>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstProxyGeoCity,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoCity>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstProxyGeoCity GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 

                return GetSummaryOperation(con, new KstProxyGeoCity(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoCity.PropertyNames.Name);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoCity.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoCity.PropertyNames.GuidState);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoCity.PropertyNames.GuidParent);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoCity.PropertyNames.KstProxyGeoCity2);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoCity.PropertyNames.KstProxyGeoState);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidCity")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidCity");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstProxyGeoCities", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstProxyGeoCity2":
					if (includesList.Contains(selected)){
                        linq = "it.KstProxyGeoCity2 as KstProxyGeoCity2";
					}
                    else
						linq = "iif(it.KstProxyGeoCity2 != null, KstProxyGeoCity(it.KstProxyGeoCity2.GuidCity, it.KstProxyGeoCity2.Name), null) as KstProxyGeoCity2";
 					break;
					case "KstProxyGeoState":
					if (includesList.Contains(selected)){
                        linq = "it.KstProxyGeoState as KstProxyGeoState";
					}
                    else
						linq = "iif(it.KstProxyGeoState != null, KstProxyGeoState(it.KstProxyGeoState.GuidState, it.KstProxyGeoState.Name), null) as KstProxyGeoState";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstProxyGeoCity> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstProxyGeoCity>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstProxyGeoCity> result = new List<KstProxyGeoCity>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstProxyGeoCity1");

        }

        public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstProxyGeoCity> GetBy(Expression<Func<KstProxyGeoCity, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstProxyGeoCity2.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"it.KstProxyGeoState.Name.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstProxyGeoCity> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstProxyGeoCity> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstProxyGeoCity> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "Name";
            }
			//orderDir = "";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstProxyGeoCity> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstProxyGeoCity> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstProxyGeoCity> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstProxyGeoCity Create(KstProxyGeoCity entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstProxyGeoCity Create(KstProxyGeoCity entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstProxyGeoCity itemForSave = new KstProxyGeoCity();
#region Autos
		if(!preventSecurityRestrictions){

	
	


			}
#endregion
               BusinessRulesEventArgs<KstProxyGeoCity> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidCity == Guid.Empty)
                   {
                       entity.GuidCity = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidCity = entity.GuidCity;
				  
		
			itemForSave.GuidCity = entity.GuidCity;

			itemForSave.Name = entity.Name;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.GuidState = entity.GuidState;

			itemForSave.GuidParent = entity.GuidParent;

				
				con.KstProxyGeoCities.Add(itemForSave);





					//if (entity.KstProxyGeoCity2 != null)
					//{
					//	var kstProxyGeoCity = new KstProxyGeoCity();
					//	kstProxyGeoCity.GuidCity = entity.KstProxyGeoCity2.GuidCity;
					//	itemForSave.KstProxyGeoCity2 = kstProxyGeoCity;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoCity>(con, itemForSave.KstProxyGeoCity2);
			
					//}




					//if (entity.KstProxyGeoState != null)
					//{
					//	var kstProxyGeoState = new KstProxyGeoState();
					//	kstProxyGeoState.GuidState = entity.KstProxyGeoState.GuidState;
					//	itemForSave.KstProxyGeoState = kstProxyGeoState;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoState>(con, itemForSave.KstProxyGeoState);
			
					//}



                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstProxyGeoCity>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstProxyGeoCity", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstProxyGeoCity> e = null;
        public void Create(List<KstProxyGeoCity> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstProxyGeoCity> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstProxyGeoCity entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstProxyGeoCity> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstProxyGeoCity> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidCity == Guid.Empty)
                   {
                       entity.GuidCity = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {


}
	
	


			}
#endregion


		
			//entity.GuidCity = entity.GuidCity;

			//entity.Name = entity.Name;

			//entity.IsDeleted = entity.IsDeleted;

				
				





				    if (entity.KstProxyGeoCity2 != null)
					{
						//var kstProxyGeoCity = new KstProxyGeoCity();
						entity.GuidParent = entity.KstProxyGeoCity2.GuidCity;
						//entity.KstProxyGeoCity2 = kstProxyGeoCity;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoCity>(con, itemForSave.KstProxyGeoCity2);
			
					}




				    if (entity.KstProxyGeoState != null)
					{
						//var kstProxyGeoState = new KstProxyGeoState();
						entity.GuidState = entity.KstProxyGeoState.GuidState;
						//entity.KstProxyGeoState = kstProxyGeoState;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoState>(con, itemForSave.KstProxyGeoState);
			
					}



                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstProxyGeoCity> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstProxyGeoCity item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstProxyGeoCity item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstProxyGeoCity> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstProxyGeoCity>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstProxyGeoCity>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstProxyGeoCity>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstProxyGeoCity> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstProxyGeoCity() { GuidCity = entity.GuidCity };

                    con.Entry<KstProxyGeoCity>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstProxyGeoCity> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

	



			}
#endregion






				    if (entity.KstProxyGeoCity2 != null)
					{
						//var kstProxyGeoCity = new KstProxyGeoCity();
						entity.GuidParent = entity.KstProxyGeoCity2.GuidCity;
						//entity.KstProxyGeoCity2 = kstProxyGeoCity;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoCity>(con, itemForSave.KstProxyGeoCity2);
			
					}




				    if (entity.KstProxyGeoState != null)
					{
						//var kstProxyGeoState = new KstProxyGeoState();
						entity.GuidState = entity.KstProxyGeoState.GuidState;
						//entity.KstProxyGeoState = kstProxyGeoState;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoState>(con, itemForSave.KstProxyGeoState);
			
					}



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstProxyGeoCity Update(KstProxyGeoCity entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstProxyGeoCity Update(KstProxyGeoCity entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstProxyGeoCity  itemResult = null;

	

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstProxyGeoCity> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstProxyGeoCitiesBR br = new KstProxyGeoCitiesBR(true );
               // var oldentity = br.GetBy("GuidCity = Guid(\"" + entity.GuidCity + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstProxyGeoCities.FirstOrDefault(p=> p.GuidCity == entity.GuidCity);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);


           
					


					


					

				
		  
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstProxyGeoCity Save(KstProxyGeoCity entity)
        {
			return Create(entity);
        }
        public int Save(List<KstProxyGeoCity> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstProxyGeoCity entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstProxyGeoCity entity, ContextRequest contextRequest)
        {
				
				  List<KstProxyGeoCity> entities = new List<KstProxyGeoCity>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstProxyGeoCitiesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstProxyGeoCity entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstProxyGeoCity> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstProxyGeoCity> _e = null;
               List<KstProxyGeoCity> _items = new List<KstProxyGeoCity>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted");

						
					}
					else {
					con.Entry<KstProxyGeoCity>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstProxyGeoCitiesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
            }

            UpdateBulk(items, "IsDeleted");
        }

         public void Delete(List<KstProxyGeoCity> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstProxyGeoCity> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstProxyGeoCity> eToChilds = new BusinessRulesEventArgs<KstProxyGeoCity>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstProxyGeoCity item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstProxyGeoCity>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstProxyGeoCity, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstProxyGeoCity, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCity>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
				
				IQueryable<KstProxyGeoCity> query = con.KstProxyGeoCities.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstProxyGeoCity2,KstProxyGeoState";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCity>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstProxyGeoCity>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstProxyGeoCity> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstProxyGeoCity>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstProxyGeoCities.Where(predicate).Count();
					
                }else
                    return con.KstProxyGeoCities.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstProxyGeoCountriesBR:BRBase<KstProxyGeoCountry>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstProxyGeoCountry> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstProxyGeoCountry> e);
          
            #endregion
			
		private static KstProxyGeoCountriesBR singlenton =null;
				public static KstProxyGeoCountriesBR NewInstance(){
					return  new KstProxyGeoCountriesBR();
					
				}
		public static KstProxyGeoCountriesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstProxyGeoCountriesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstProxyGeoCountriesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstProxyGeoCountry";

            context = new EFContext();
        }
		 public KstProxyGeoCountriesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstProxyGeoCountry";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstProxyGeoCountry> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstProxyGeoCountries.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstProxyGeoCountry> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstProxyGeoCountry> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstProxyGeoCountry GetByKey(Guid guidCountry)
        {
            return GetByKey(guidCountry, true);
        }
        public KstProxyGeoCountry GetByKey(Guid guidCountry, bool loadIncludes)
        {
            KstProxyGeoCountry item = null;
			var query = PredicateBuilder.True<KstProxyGeoCountry>();
                    
			string strWhere = @"GuidCountry = Guid(""" + guidCountry.ToString()+@""")";
            Expression<Func<KstProxyGeoCountry, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyGeoCountry, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstProxyGeoCountry> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstProxyGeoCountry> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstProxyGeoCountry GetByKey(Guid guidCountry, params Expression<Func<KstProxyGeoCountry, object>>[] includes)
        {
            KstProxyGeoCountry item = null;
			string strWhere = @"GuidCountry = Guid(""" + guidCountry.ToString()+@""")";
          Expression<Func<KstProxyGeoCountry, bool>> predicate = p=> p.GuidCountry == guidCountry;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyGeoCountry, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstProxyGeoCountry GetByKey(Guid guidCountry, string includes)
        {
            KstProxyGeoCountry item = null;
			string strWhere = @"GuidCountry = Guid(""" + guidCountry.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstProxyGeoCountry GetByKey(Guid guidCountry, string usemode, string includes)
		{
			return GetByKey(guidCountry, usemode, null, includes);

		 }
		 public KstProxyGeoCountry GetByKey(Guid guidCountry, string usemode, ContextRequest context,  string includes)
        {
            KstProxyGeoCountry item = null;
			string strWhere = @"GuidCountry = Guid(""" + guidCountry.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstProxyGeoCountry, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstProxyGeoCountry>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate, params Expression<Func<KstProxyGeoCountry, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCountry>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					Expression<Func<KstProxyGeoCountry,bool>> multitenantExpression = null;
 
                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstProxyGeoCountry> result = null;
               BusinessRulesEventArgs<KstProxyGeoCountry>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstProxyGeoCountry>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstProxyGeoCountry>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCountry>();
                
                //var es = _repository.Queryable;

                IQueryable<KstProxyGeoCountry> query =  con.KstProxyGeoCountries.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstProxyGeoCountry>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstProxyGeoCountry>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstProxyGeoCountry>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstProxyGeoCountry> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCountry>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstProxyGeoCountry> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstProxyGeoCountry> result = new List<KstProxyGeoCountry>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstProxyGeoCountry>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCountry>();
                
                //var es = _repository.Queryable;
				IQueryable<KstProxyGeoCountry> query = con.KstProxyGeoCountries.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


				//string predicateString = predicate.ToDynamicLinq<KstProxyGeoCountry>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstProxyGeoCountry,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstProxyGeoCountry GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 

                return GetSummaryOperation(con, new KstProxyGeoCountry(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoCountry.PropertyNames.Name);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoCountry.PropertyNames.IsDeleted);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidCountry")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidCountry");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstProxyGeoCountries", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstProxyGeoCountry> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstProxyGeoCountry> result = new List<KstProxyGeoCountry>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstProxyGeoStates");

        }

        public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstProxyGeoCountry> GetBy(Expression<Func<KstProxyGeoCountry, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));
					

					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstProxyGeoCountry> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstProxyGeoCountry> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstProxyGeoCountry> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "Name";
            }
			//orderDir = "";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstProxyGeoCountry> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstProxyGeoCountry> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstProxyGeoCountry> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstProxyGeoCountry Create(KstProxyGeoCountry entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstProxyGeoCountry Create(KstProxyGeoCountry entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstProxyGeoCountry itemForSave = new KstProxyGeoCountry();
#region Autos
		if(!preventSecurityRestrictions){

	
	


			}
#endregion
               BusinessRulesEventArgs<KstProxyGeoCountry> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidCountry == Guid.Empty)
                   {
                       entity.GuidCountry = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidCountry = entity.GuidCountry;
				  
		
			itemForSave.GuidCountry = entity.GuidCountry;

			itemForSave.Name = entity.Name;

			itemForSave.IsDeleted = entity.IsDeleted;

				
				con.KstProxyGeoCountries.Add(itemForSave);




                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstProxyGeoCountry>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstProxyGeoCountry", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstProxyGeoCountry> e = null;
        public void Create(List<KstProxyGeoCountry> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstProxyGeoCountry> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstProxyGeoCountry entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstProxyGeoCountry> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstProxyGeoCountry> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidCountry == Guid.Empty)
                   {
                       entity.GuidCountry = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {


}
	
	


			}
#endregion


		
			//entity.GuidCountry = entity.GuidCountry;

			//entity.Name = entity.Name;

			//entity.IsDeleted = entity.IsDeleted;

				
				




                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstProxyGeoCountry> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstProxyGeoCountry item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstProxyGeoCountry item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstProxyGeoCountry> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstProxyGeoCountry>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstProxyGeoCountry>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstProxyGeoCountry> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstProxyGeoCountry() { GuidCountry = entity.GuidCountry };

                    con.Entry<KstProxyGeoCountry>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstProxyGeoCountry> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

	



			}
#endregion





				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstProxyGeoCountry Update(KstProxyGeoCountry entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstProxyGeoCountry Update(KstProxyGeoCountry entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstProxyGeoCountry  itemResult = null;

	

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstProxyGeoCountry> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstProxyGeoCountriesBR br = new KstProxyGeoCountriesBR(true );
               // var oldentity = br.GetBy("GuidCountry = Guid(\"" + entity.GuidCountry + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstProxyGeoCountries.FirstOrDefault(p=> p.GuidCountry == entity.GuidCountry);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);


           
					

				
		  
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstProxyGeoCountry Save(KstProxyGeoCountry entity)
        {
			return Create(entity);
        }
        public int Save(List<KstProxyGeoCountry> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstProxyGeoCountry entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstProxyGeoCountry entity, ContextRequest contextRequest)
        {
				
				  List<KstProxyGeoCountry> entities = new List<KstProxyGeoCountry>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstProxyGeoCountriesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstProxyGeoCountry entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstProxyGeoCountry> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstProxyGeoCountry> _e = null;
               List<KstProxyGeoCountry> _items = new List<KstProxyGeoCountry>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted");

						
					}
					else {
					con.Entry<KstProxyGeoCountry>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstProxyGeoCountriesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
            }

            UpdateBulk(items, "IsDeleted");
        }

         public void Delete(List<KstProxyGeoCountry> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstProxyGeoCountry> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstProxyGeoCountry> eToChilds = new BusinessRulesEventArgs<KstProxyGeoCountry>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstProxyGeoCountry item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstProxyGeoCountry>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstProxyGeoCountry, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstProxyGeoCountry, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCountry>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
				
				IQueryable<KstProxyGeoCountry> query = con.KstProxyGeoCountries.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoCountry>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstProxyGeoCountry>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstProxyGeoCountry> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstProxyGeoCountry>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstProxyGeoCountries.Where(predicate).Count();
					
                }else
                    return con.KstProxyGeoCountries.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstProxyGeoStatesBR:BRBase<KstProxyGeoState>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstProxyGeoState> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstProxyGeoState> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstProxyGeoState> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstProxyGeoState> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstProxyGeoState> e);
          
            #endregion
			
		private static KstProxyGeoStatesBR singlenton =null;
				public static KstProxyGeoStatesBR NewInstance(){
					return  new KstProxyGeoStatesBR();
					
				}
		public static KstProxyGeoStatesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstProxyGeoStatesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstProxyGeoStatesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstProxyGeoState";

            context = new EFContext();
        }
		 public KstProxyGeoStatesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstProxyGeoState";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstProxyGeoState> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstProxyGeoStates.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstProxyGeoState> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstProxyGeoState> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstProxyGeoState GetByKey(Guid guidState)
        {
            return GetByKey(guidState, true);
        }
        public KstProxyGeoState GetByKey(Guid guidState, bool loadIncludes)
        {
            KstProxyGeoState item = null;
			var query = PredicateBuilder.True<KstProxyGeoState>();
                    
			string strWhere = @"GuidState = Guid(""" + guidState.ToString()+@""")";
            Expression<Func<KstProxyGeoState, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyGeoState, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstProxyGeoState> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstProxyGeoState> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstProxyGeoState GetByKey(Guid guidState, params Expression<Func<KstProxyGeoState, object>>[] includes)
        {
            KstProxyGeoState item = null;
			string strWhere = @"GuidState = Guid(""" + guidState.ToString()+@""")";
          Expression<Func<KstProxyGeoState, bool>> predicate = p=> p.GuidState == guidState;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyGeoState, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstProxyGeoState GetByKey(Guid guidState, string includes)
        {
            KstProxyGeoState item = null;
			string strWhere = @"GuidState = Guid(""" + guidState.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstProxyGeoState GetByKey(Guid guidState, string usemode, string includes)
		{
			return GetByKey(guidState, usemode, null, includes);

		 }
		 public KstProxyGeoState GetByKey(Guid guidState, string usemode, ContextRequest context,  string includes)
        {
            KstProxyGeoState item = null;
			string strWhere = @"GuidState = Guid(""" + guidState.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstProxyGeoState, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstProxyGeoState>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate, params Expression<Func<KstProxyGeoState, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstProxyGeoCountry";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoState>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					Expression<Func<KstProxyGeoState,bool>> multitenantExpression = null;
 
                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstProxyGeoState> result = null;
               BusinessRulesEventArgs<KstProxyGeoState>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstProxyGeoState>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstProxyGeoState>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstProxyGeoState>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoState>();
 				string fkIncludes = "KstProxyGeoCountry";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstProxyGeoState> query =  con.KstProxyGeoStates.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstProxyGeoState>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstProxyGeoState>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstProxyGeoState>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstProxyGeoState> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstProxyGeoCountry";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoState>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstProxyGeoState> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstProxyGeoState> result = new List<KstProxyGeoState>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoState>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstProxyGeoState>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoState>();
 				string fkIncludes = "KstProxyGeoCountry";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstProxyGeoState> query = con.KstProxyGeoStates.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


				//string predicateString = predicate.ToDynamicLinq<KstProxyGeoState>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstProxyGeoState,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoState>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstProxyGeoState GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 

                return GetSummaryOperation(con, new KstProxyGeoState(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoState.PropertyNames.Name);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoState.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoState.PropertyNames.GuidCountry);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyGeoState.PropertyNames.KstProxyGeoCountry);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidState")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidState");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstProxyGeoStates", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstProxyGeoCountry":
					if (includesList.Contains(selected)){
                        linq = "it.KstProxyGeoCountry as KstProxyGeoCountry";
					}
                    else
						linq = "iif(it.KstProxyGeoCountry != null, KstProxyGeoCountry(it.KstProxyGeoCountry.GuidCountry, it.KstProxyGeoCountry.Name), null) as KstProxyGeoCountry";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstProxyGeoState> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstProxyGeoState>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstProxyGeoState> result = new List<KstProxyGeoState>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstProxyGeoCities");

        }

        public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstProxyGeoState> GetBy(Expression<Func<KstProxyGeoState, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstProxyGeoCountry.Name.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstProxyGeoState> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstProxyGeoState> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstProxyGeoState> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "Name";
            }
			//orderDir = "";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstProxyGeoState> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstProxyGeoState> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstProxyGeoState> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstProxyGeoState Create(KstProxyGeoState entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstProxyGeoState Create(KstProxyGeoState entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstProxyGeoState itemForSave = new KstProxyGeoState();
#region Autos
		if(!preventSecurityRestrictions){

	
	


			}
#endregion
               BusinessRulesEventArgs<KstProxyGeoState> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidState == Guid.Empty)
                   {
                       entity.GuidState = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidState = entity.GuidState;
				  
		
			itemForSave.GuidState = entity.GuidState;

			itemForSave.Name = entity.Name;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.GuidCountry = entity.GuidCountry;

				
				con.KstProxyGeoStates.Add(itemForSave);





					//if (entity.KstProxyGeoCountry != null)
					//{
					//	var kstProxyGeoCountry = new KstProxyGeoCountry();
					//	kstProxyGeoCountry.GuidCountry = entity.KstProxyGeoCountry.GuidCountry;
					//	itemForSave.KstProxyGeoCountry = kstProxyGeoCountry;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoCountry>(con, itemForSave.KstProxyGeoCountry);
			
					//}



                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstProxyGeoState>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstProxyGeoState", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstProxyGeoState> e = null;
        public void Create(List<KstProxyGeoState> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstProxyGeoState> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstProxyGeoState entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstProxyGeoState> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstProxyGeoState> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidState == Guid.Empty)
                   {
                       entity.GuidState = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {


}
	
	


			}
#endregion


		
			//entity.GuidState = entity.GuidState;

			//entity.Name = entity.Name;

			//entity.IsDeleted = entity.IsDeleted;

				
				





				    if (entity.KstProxyGeoCountry != null)
					{
						//var kstProxyGeoCountry = new KstProxyGeoCountry();
						entity.GuidCountry = entity.KstProxyGeoCountry.GuidCountry;
						//entity.KstProxyGeoCountry = kstProxyGeoCountry;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoCountry>(con, itemForSave.KstProxyGeoCountry);
			
					}



                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstProxyGeoState> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstProxyGeoState item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstProxyGeoState item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstProxyGeoState> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstProxyGeoState>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstProxyGeoState>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstProxyGeoState>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstProxyGeoState> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstProxyGeoState() { GuidState = entity.GuidState };

                    con.Entry<KstProxyGeoState>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstProxyGeoState> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

	



			}
#endregion






				    if (entity.KstProxyGeoCountry != null)
					{
						//var kstProxyGeoCountry = new KstProxyGeoCountry();
						entity.GuidCountry = entity.KstProxyGeoCountry.GuidCountry;
						//entity.KstProxyGeoCountry = kstProxyGeoCountry;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyGeoCountry>(con, itemForSave.KstProxyGeoCountry);
			
					}



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstProxyGeoState Update(KstProxyGeoState entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstProxyGeoState Update(KstProxyGeoState entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstProxyGeoState  itemResult = null;

	

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstProxyGeoState> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstProxyGeoStatesBR br = new KstProxyGeoStatesBR(true );
               // var oldentity = br.GetBy("GuidState = Guid(\"" + entity.GuidState + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstProxyGeoStates.FirstOrDefault(p=> p.GuidState == entity.GuidState);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);


           
					


					

				
		  
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstProxyGeoState Save(KstProxyGeoState entity)
        {
			return Create(entity);
        }
        public int Save(List<KstProxyGeoState> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstProxyGeoState entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstProxyGeoState entity, ContextRequest contextRequest)
        {
				
				  List<KstProxyGeoState> entities = new List<KstProxyGeoState>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstProxyGeoStatesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstProxyGeoState entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstProxyGeoState> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstProxyGeoState> _e = null;
               List<KstProxyGeoState> _items = new List<KstProxyGeoState>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted");

						
					}
					else {
					con.Entry<KstProxyGeoState>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstProxyGeoStatesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
            }

            UpdateBulk(items, "IsDeleted");
        }

         public void Delete(List<KstProxyGeoState> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstProxyGeoState> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstProxyGeoState> eToChilds = new BusinessRulesEventArgs<KstProxyGeoState>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstProxyGeoState item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstProxyGeoState>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstProxyGeoState, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstProxyGeoState, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoState>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
				
				IQueryable<KstProxyGeoState> query = con.KstProxyGeoStates.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstProxyGeoCountry";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyGeoState>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstProxyGeoState>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstProxyGeoState> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstProxyGeoState>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstProxyGeoStates.Where(predicate).Count();
					
                }else
                    return con.KstProxyGeoStates.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstActivitiesBR:BRBase<KstActivity>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstActivity> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstActivity> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstActivity> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstActivity> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstActivity> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstActivity> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstActivity> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstActivity> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstActivity> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstActivity> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstActivity> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstActivity> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstActivity> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstActivity> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstActivity> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstActivity> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstActivity> e);
          
            #endregion
			
		private static KstActivitiesBR singlenton =null;
				public static KstActivitiesBR NewInstance(){
					return  new KstActivitiesBR();
					
				}
		public static KstActivitiesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstActivitiesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstActivitiesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstActivity";

            context = new EFContext();
        }
		 public KstActivitiesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstActivity";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstActivity> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstActivities.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstActivity> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstActivity> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstActivity GetByKey(Guid guidActivity)
        {
            return GetByKey(guidActivity, true);
        }
        public KstActivity GetByKey(Guid guidActivity, bool loadIncludes)
        {
            KstActivity item = null;
			var query = PredicateBuilder.True<KstActivity>();
                    
			string strWhere = @"GuidActivity = Guid(""" + guidActivity.ToString()+@""")";
            Expression<Func<KstActivity, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstActivity, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstActivity> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstActivity> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstActivity GetByKey(Guid guidActivity, params Expression<Func<KstActivity, object>>[] includes)
        {
            KstActivity item = null;
			string strWhere = @"GuidActivity = Guid(""" + guidActivity.ToString()+@""")";
          Expression<Func<KstActivity, bool>> predicate = p=> p.GuidActivity == guidActivity;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstActivity, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstActivity GetByKey(Guid guidActivity, string includes)
        {
            KstActivity item = null;
			string strWhere = @"GuidActivity = Guid(""" + guidActivity.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstActivity GetByKey(Guid guidActivity, string usemode, string includes)
		{
			return GetByKey(guidActivity, usemode, null, includes);

		 }
		 public KstActivity GetByKey(Guid guidActivity, string usemode, ContextRequest context,  string includes)
        {
            KstActivity item = null;
			string strWhere = @"GuidActivity = Guid(""" + guidActivity.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstActivity, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstActivity>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate, params Expression<Func<KstActivity, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstProject,KstActivityType";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstActivity>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstActivity,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstActivity> result = null;
               BusinessRulesEventArgs<KstActivity>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstActivity>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstActivity>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstActivity>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstActivity>();
 				string fkIncludes = "KstProject,KstActivityType";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstActivity> query =  con.KstActivities.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstActivity>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstActivity>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstActivity>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstActivity> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstProject,KstActivityType";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstActivity>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstActivity> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstActivity> result = new List<KstActivity>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstActivity>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstActivity>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstActivity>();
 				string fkIncludes = "KstProject,KstActivityType";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstActivity> query = con.KstActivities.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstActivity>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstActivity,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstActivity>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstActivity GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstActivity(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.Name);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.GuidProject);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.IsCustomByUser);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.Bytes);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.GuidActivityType);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.KstProject);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivity.PropertyNames.KstActivityType);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidActivity")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidActivity");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstActivities", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstProject":
					if (includesList.Contains(selected)){
                        linq = "it.KstProject as KstProject";
					}
                    else
						linq = "iif(it.KstProject != null, KstProject(it.KstProject.GuidProject, it.KstProject.Name), null) as KstProject";
 					break;
					case "KstActivityType":
					if (includesList.Contains(selected)){
                        linq = "it.KstActivityType as KstActivityType";
					}
                    else
						linq = "iif(it.KstActivityType != null, KstActivityType(it.KstActivityType.GuidActivityType, it.KstActivityType.Name), null) as KstActivityType";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstActivity> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstActivity>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstActivity> result = new List<KstActivity>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstWorkTimes");

        }

        public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstActivity> GetBy(Expression<Func<KstActivity, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstProject.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"it.KstActivityType.Name.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstActivity> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstActivity> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstActivity> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstActivity> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstActivity> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstActivity> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstActivity Create(KstActivity entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstActivity Create(KstActivity entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstActivity itemForSave = new KstActivity();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstActivity> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidActivity == Guid.Empty)
                   {
                       entity.GuidActivity = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidActivity = entity.GuidActivity;
				  
		
			itemForSave.GuidActivity = entity.GuidActivity;

			itemForSave.Name = entity.Name;

			itemForSave.GuidProject = entity.GuidProject;

			itemForSave.IsCustomByUser = entity.IsCustomByUser;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

			itemForSave.GuidActivityType = entity.GuidActivityType;

				
				con.KstActivities.Add(itemForSave);



					//if (entity.KstProject != null)
					//{
					//	var kstProject = new KstProject();
					//	kstProject.GuidProject = entity.KstProject.GuidProject;
					//	itemForSave.KstProject = kstProject;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					//}






					//if (entity.KstActivityType != null)
					//{
					//	var kstActivityType = new KstActivityType();
					//	kstActivityType.GuidActivityType = entity.KstActivityType.GuidActivityType;
					//	itemForSave.KstActivityType = kstActivityType;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstActivityType>(con, itemForSave.KstActivityType);
			
					//}



                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstActivity>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstActivity", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstActivity> e = null;
        public void Create(List<KstActivity> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstActivity> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstActivity entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstActivity> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstActivity> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidActivity == Guid.Empty)
                   {
                       entity.GuidActivity = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidActivity = entity.GuidActivity;

			//entity.Name = entity.Name;

			//entity.IsCustomByUser = entity.IsCustomByUser;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				



				    if (entity.KstProject != null)
					{
						//var kstProject = new KstProject();
						entity.GuidProject = entity.KstProject.GuidProject;
						//entity.KstProject = kstProject;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					}






				    if (entity.KstActivityType != null)
					{
						//var kstActivityType = new KstActivityType();
						entity.GuidActivityType = entity.KstActivityType.GuidActivityType;
						//entity.KstActivityType = kstActivityType;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstActivityType>(con, itemForSave.KstActivityType);
			
					}



                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstActivity> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstActivity item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstActivity item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstActivity> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstActivity>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstActivities", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstActivity>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstActivity>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstActivity> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstActivity() { GuidActivity = entity.GuidActivity };

                    con.Entry<KstActivity>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstActivity> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion




				    if (entity.KstProject != null)
					{
						//var kstProject = new KstProject();
						entity.GuidProject = entity.KstProject.GuidProject;
						//entity.KstProject = kstProject;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					}






				    if (entity.KstActivityType != null)
					{
						//var kstActivityType = new KstActivityType();
						entity.GuidActivityType = entity.KstActivityType.GuidActivityType;
						//entity.KstActivityType = kstActivityType;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstActivityType>(con, itemForSave.KstActivityType);
			
					}



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstActivity Update(KstActivity entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstActivity Update(KstActivity entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstActivity  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidActivity == entity.GuidActivity, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstActivity> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstActivitiesBR br = new KstActivitiesBR(true );
               // var oldentity = br.GetBy("GuidActivity = Guid(\"" + entity.GuidActivity + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstActivities.FirstOrDefault(p=> p.GuidActivity == entity.GuidActivity);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstActivities", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstActivity.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstActivity.PropertyNames.UpdatedBy);
				}

           


					
					


					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstActivity Save(KstActivity entity)
        {
			return Create(entity);
        }
        public int Save(List<KstActivity> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstActivity entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstActivity entity, ContextRequest contextRequest)
        {
				
				  List<KstActivity> entities = new List<KstActivity>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstActivitiesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstActivity entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstActivity> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstActivity> _e = null;
               List<KstActivity> _items = new List<KstActivity>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstActivity>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstActivitiesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstActivity> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstActivity> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstActivity> eToChilds = new BusinessRulesEventArgs<KstActivity>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstActivity item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstActivity>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstActivity, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstActivity, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstActivity>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstActivity> query = con.KstActivities.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstProject,KstActivityType";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstActivity>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstActivity>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstActivity> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstActivity>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstActivities.Where(predicate).Count();
					
                }else
                    return con.KstActivities.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstProjectsBR:BRBase<KstProject>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstProject> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstProject> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstProject> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstProject> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstProject> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstProject> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstProject> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstProject> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstProject> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstProject> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstProject> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstProject> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstProject> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstProject> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstProject> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstProject> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstProject> e);
          
            #endregion
			
		private static KstProjectsBR singlenton =null;
				public static KstProjectsBR NewInstance(){
					return  new KstProjectsBR();
					
				}
		public static KstProjectsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstProjectsBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstProjectsBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstProject";

            context = new EFContext();
        }
		 public KstProjectsBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstProject";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstProject> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstProjects.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstProject> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstProject> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstProject GetByKey(Guid guidProject)
        {
            return GetByKey(guidProject, true);
        }
        public KstProject GetByKey(Guid guidProject, bool loadIncludes)
        {
            KstProject item = null;
			var query = PredicateBuilder.True<KstProject>();
                    
			string strWhere = @"GuidProject = Guid(""" + guidProject.ToString()+@""")";
            Expression<Func<KstProject, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProject, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstProject> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstProject> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstProject GetByKey(Guid guidProject, params Expression<Func<KstProject, object>>[] includes)
        {
            KstProject item = null;
			string strWhere = @"GuidProject = Guid(""" + guidProject.ToString()+@""")";
          Expression<Func<KstProject, bool>> predicate = p=> p.GuidProject == guidProject;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProject, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstProject GetByKey(Guid guidProject, string includes)
        {
            KstProject item = null;
			string strWhere = @"GuidProject = Guid(""" + guidProject.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstProject GetByKey(Guid guidProject, string usemode, string includes)
		{
			return GetByKey(guidProject, usemode, null, includes);

		 }
		 public KstProject GetByKey(Guid guidProject, string usemode, ContextRequest context,  string includes)
        {
            KstProject item = null;
			string strWhere = @"GuidProject = Guid(""" + guidProject.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstProject, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstProject>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate, params Expression<Func<KstProject, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstProject>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstProject,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstProject> result = null;
               BusinessRulesEventArgs<KstProject>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstProject>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstProject>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstProject>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstProject>();
                
                //var es = _repository.Queryable;

                IQueryable<KstProject> query =  con.KstProjects.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstProject>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstProject>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstProject>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstProject> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "NumActivities|NumUsers";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProject>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstProject> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstProject> result = new List<KstProject>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstProject>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstProject>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstProject>();
                
                //var es = _repository.Queryable;
				IQueryable<KstProject> query = con.KstProjects.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstProject>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("NumActivities|NumUsers");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("NumActivities|NumUsers", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstProject,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstProject>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstProject GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "NumActivities|NumUsers";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstProject(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.Name);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProject.PropertyNames.Bytes);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidProject")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidProject");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstProjects", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
                if (isFullDetails || filterForTest.Contains("NumActivities"))
                    contextRequest.CustomQuery.SpecificProperties.Add("NumActivities");
                if (isFullDetails || filterForTest.Contains("NumUsers"))
                    contextRequest.CustomQuery.SpecificProperties.Add("NumUsers");
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "NumActivities":

					case "NumUsers":

					linq =  null;
				break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstProject> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstProject>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstProject> result = new List<KstProject>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstActivities,KstProjectUsers,KstWorkTimes,KstProjectFiles");

        }

        public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstProject> GetBy(Expression<Func<KstProject, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstProject> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstProject> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstProject> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstProject> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstProject> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstProject> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstProject Create(KstProject entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstProject Create(KstProject entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstProject itemForSave = new KstProject();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstProject> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidProject == Guid.Empty)
                   {
                       entity.GuidProject = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidProject = entity.GuidProject;
				  
		
			itemForSave.GuidProject = entity.GuidProject;

			itemForSave.Name = entity.Name;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

				
				con.KstProjects.Add(itemForSave);










                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstProject>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstProject", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstProject> e = null;
        public void Create(List<KstProject> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstProject> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstProject entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstProject> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstProject> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidProject == Guid.Empty)
                   {
                       entity.GuidProject = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidProject = entity.GuidProject;

			//entity.Name = entity.Name;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				










                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstProject> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstProject item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstProject item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstProject> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstProject>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProjects", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstProject>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstProject>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstProject> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstProject() { GuidProject = entity.GuidProject };

                    con.Entry<KstProject>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstProject> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion











				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstProject Update(KstProject entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstProject Update(KstProject entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstProject  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidProject == entity.GuidProject, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstProject> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstProjectsBR br = new KstProjectsBR(true );
               // var oldentity = br.GetBy("GuidProject = Guid(\"" + entity.GuidProject + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstProjects.FirstOrDefault(p=> p.GuidProject == entity.GuidProject);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProjects", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstProject.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstProject.PropertyNames.UpdatedBy);
				}

           
					
					
					
					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstProject Save(KstProject entity)
        {
			return Create(entity);
        }
        public int Save(List<KstProject> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstProject entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstProject entity, ContextRequest contextRequest)
        {
				
				  List<KstProject> entities = new List<KstProject>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstProjectsBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstProject entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstProject> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstProject> _e = null;
               List<KstProject> _items = new List<KstProject>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstProject>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstProjectsBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstProject> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstProject> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstProject> eToChilds = new BusinessRulesEventArgs<KstProject>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstProject item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstProject>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstProject, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstProject, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstProject>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstProject> query = con.KstProjects.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "NumActivities|NumUsers";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProject>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstProject>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstProject> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstProject>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("NumActivities|NumUsers");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("NumActivities|NumUsers", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
			
 				var query = con.KstProjects.AsQueryable();
                    var _queryable = query.AsQueryable();
                   if (!string.IsNullOrEmpty(predicateWithManyRelations))
					 	_queryable = _queryable.Where(predicateWithManyRelations);




				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it.") && !selected.PreventPrefix)
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());   

					if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                        queryable = queryable.Where(predicateWithFKAndComputed);

					
                    return queryable.Count();
			
					
                }else
                    return con.KstProjects.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstProjectUsersBR:BRBase<KstProjectUser>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstProjectUser> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstProjectUser> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstProjectUser> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstProjectUser> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstProjectUser> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstProjectUser> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstProjectUser> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstProjectUser> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstProjectUser> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstProjectUser> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstProjectUser> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstProjectUser> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstProjectUser> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstProjectUser> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstProjectUser> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstProjectUser> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstProjectUser> e);
          
            #endregion
			
		private static KstProjectUsersBR singlenton =null;
				public static KstProjectUsersBR NewInstance(){
					return  new KstProjectUsersBR();
					
				}
		public static KstProjectUsersBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstProjectUsersBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstProjectUsersBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstProjectUser";

            context = new EFContext();
        }
		 public KstProjectUsersBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstProjectUser";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstProjectUser> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstProjectUsers.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstProjectUser> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstProjectUser> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstProjectUser GetByKey(Guid guidProjectUser)
        {
            return GetByKey(guidProjectUser, true);
        }
        public KstProjectUser GetByKey(Guid guidProjectUser, bool loadIncludes)
        {
            KstProjectUser item = null;
			var query = PredicateBuilder.True<KstProjectUser>();
                    
			string strWhere = @"GuidProjectUser = Guid(""" + guidProjectUser.ToString()+@""")";
            Expression<Func<KstProjectUser, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProjectUser, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstProjectUser> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstProjectUser> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstProjectUser GetByKey(Guid guidProjectUser, params Expression<Func<KstProjectUser, object>>[] includes)
        {
            KstProjectUser item = null;
			string strWhere = @"GuidProjectUser = Guid(""" + guidProjectUser.ToString()+@""")";
          Expression<Func<KstProjectUser, bool>> predicate = p=> p.GuidProjectUser == guidProjectUser;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProjectUser, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstProjectUser GetByKey(Guid guidProjectUser, string includes)
        {
            KstProjectUser item = null;
			string strWhere = @"GuidProjectUser = Guid(""" + guidProjectUser.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstProjectUser GetByKey(Guid guidProjectUser, string usemode, string includes)
		{
			return GetByKey(guidProjectUser, usemode, null, includes);

		 }
		 public KstProjectUser GetByKey(Guid guidProjectUser, string usemode, ContextRequest context,  string includes)
        {
            KstProjectUser item = null;
			string strWhere = @"GuidProjectUser = Guid(""" + guidProjectUser.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstProjectUser, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstProjectUser>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate, params Expression<Func<KstProjectUser, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstProject,KstProxyUser";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstProjectUser>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstProjectUser,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstProjectUser> result = null;
               BusinessRulesEventArgs<KstProjectUser>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstProjectUser>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstProjectUser>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstProjectUser>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstProjectUser>();
 				string fkIncludes = "KstProject,KstProxyUser";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstProjectUser> query =  con.KstProjectUsers.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstProjectUser>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstProjectUser>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstProjectUser>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstProjectUser> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstProject,KstProxyUser";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProjectUser>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstProjectUser> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstProjectUser> result = new List<KstProjectUser>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstProjectUser>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstProjectUser>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstProjectUser>();
 				string fkIncludes = "KstProject,KstProxyUser";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstProjectUser> query = con.KstProjectUsers.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstProjectUser>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstProjectUser,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstProjectUser>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstProjectUser GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstProjectUser(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.GuidProject);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.GuidUser);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.StartDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.EndDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.Bytes);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.KstProject);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectUser.PropertyNames.KstProxyUser);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidProjectUser")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidProjectUser");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstProjectUsers", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstProject":
					if (includesList.Contains(selected)){
                        linq = "it.KstProject as KstProject";
					}
                    else
						linq = "iif(it.KstProject != null, KstProject(it.KstProject.GuidProject, it.KstProject.Name), null) as KstProject";
 					break;
					case "KstProxyUser":
					if (includesList.Contains(selected)){
                        linq = "it.KstProxyUser as KstProxyUser";
					}
                    else
						linq = "iif(it.KstProxyUser != null, KstProxyUser(it.KstProxyUser.GuidUser, it.KstProxyUser.DisplayName), null) as KstProxyUser";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstProjectUser> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstProjectUser>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstProjectUser> result = new List<KstProjectUser>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstProjectUser> GetBy(Expression<Func<KstProjectUser, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstProject.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"it.KstProxyUser.DisplayName.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstProjectUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstProjectUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstProjectUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstProjectUser> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstProjectUser> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstProjectUser> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstProjectUser Create(KstProjectUser entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstProjectUser Create(KstProjectUser entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstProjectUser itemForSave = new KstProjectUser();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstProjectUser> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidProjectUser == Guid.Empty)
                   {
                       entity.GuidProjectUser = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidProjectUser = entity.GuidProjectUser;
				  
		
			itemForSave.GuidProjectUser = entity.GuidProjectUser;

			itemForSave.GuidProject = entity.GuidProject;

			itemForSave.GuidUser = entity.GuidUser;

			itemForSave.StartDate = entity.StartDate;

			itemForSave.EndDate = entity.EndDate;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

				
				con.KstProjectUsers.Add(itemForSave);



					//if (entity.KstProject != null)
					//{
					//	var kstProject = new KstProject();
					//	kstProject.GuidProject = entity.KstProject.GuidProject;
					//	itemForSave.KstProject = kstProject;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					//}




					//if (entity.KstProxyUser != null)
					//{
					//	var kstProxyUser = new KstProxyUser();
					//	kstProxyUser.GuidUser = entity.KstProxyUser.GuidUser;
					//	itemForSave.KstProxyUser = kstProxyUser;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyUser>(con, itemForSave.KstProxyUser);
			
					//}



                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstProjectUser>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstProjectUser", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstProjectUser> e = null;
        public void Create(List<KstProjectUser> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstProjectUser> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstProjectUser entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstProjectUser> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstProjectUser> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidProjectUser == Guid.Empty)
                   {
                       entity.GuidProjectUser = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidProjectUser = entity.GuidProjectUser;

			//entity.StartDate = entity.StartDate;

			//entity.EndDate = entity.EndDate;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				



				    if (entity.KstProject != null)
					{
						//var kstProject = new KstProject();
						entity.GuidProject = entity.KstProject.GuidProject;
						//entity.KstProject = kstProject;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					}




				    if (entity.KstProxyUser != null)
					{
						//var kstProxyUser = new KstProxyUser();
						entity.GuidUser = entity.KstProxyUser.GuidUser;
						//entity.KstProxyUser = kstProxyUser;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyUser>(con, itemForSave.KstProxyUser);
			
					}



                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstProjectUser> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstProjectUser item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstProjectUser item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstProjectUser> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstProjectUser>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProjectUsers", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstProjectUser>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstProjectUser>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstProjectUser> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstProjectUser() { GuidProjectUser = entity.GuidProjectUser };

                    con.Entry<KstProjectUser>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstProjectUser> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion




				    if (entity.KstProject != null)
					{
						//var kstProject = new KstProject();
						entity.GuidProject = entity.KstProject.GuidProject;
						//entity.KstProject = kstProject;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					}




				    if (entity.KstProxyUser != null)
					{
						//var kstProxyUser = new KstProxyUser();
						entity.GuidUser = entity.KstProxyUser.GuidUser;
						//entity.KstProxyUser = kstProxyUser;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyUser>(con, itemForSave.KstProxyUser);
			
					}



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstProjectUser Update(KstProjectUser entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstProjectUser Update(KstProjectUser entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstProjectUser  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidProjectUser == entity.GuidProjectUser, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstProjectUser> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstProjectUsersBR br = new KstProjectUsersBR(true );
               // var oldentity = br.GetBy("GuidProjectUser = Guid(\"" + entity.GuidProjectUser + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstProjectUsers.FirstOrDefault(p=> p.GuidProjectUser == entity.GuidProjectUser);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProjectUsers", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstProjectUser.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstProjectUser.PropertyNames.UpdatedBy);
				}

           


					


					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstProjectUser Save(KstProjectUser entity)
        {
			return Create(entity);
        }
        public int Save(List<KstProjectUser> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstProjectUser entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstProjectUser entity, ContextRequest contextRequest)
        {
				
				  List<KstProjectUser> entities = new List<KstProjectUser>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstProjectUsersBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstProjectUser entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstProjectUser> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstProjectUser> _e = null;
               List<KstProjectUser> _items = new List<KstProjectUser>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstProjectUser>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstProjectUsersBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstProjectUser> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstProjectUser> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstProjectUser> eToChilds = new BusinessRulesEventArgs<KstProjectUser>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstProjectUser item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstProjectUser>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstProjectUser, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstProjectUser, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstProjectUser>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstProjectUser> query = con.KstProjectUsers.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstProject,KstProxyUser";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProjectUser>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstProjectUser>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstProjectUser> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstProjectUser>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstProjectUsers.Where(predicate).Count();
					
                }else
                    return con.KstProjectUsers.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstWorkTimesBR:BRBase<KstWorkTime>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstWorkTime> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstWorkTime> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstWorkTime> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstWorkTime> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstWorkTime> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstWorkTime> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstWorkTime> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstWorkTime> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstWorkTime> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstWorkTime> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstWorkTime> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstWorkTime> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstWorkTime> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstWorkTime> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstWorkTime> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstWorkTime> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstWorkTime> e);
          
            #endregion
			
		private static KstWorkTimesBR singlenton =null;
				public static KstWorkTimesBR NewInstance(){
					return  new KstWorkTimesBR();
					
				}
		public static KstWorkTimesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstWorkTimesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstWorkTimesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstWorkTime";

            context = new EFContext();
        }
		 public KstWorkTimesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstWorkTime";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstWorkTime> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstWorkTimes.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstWorkTime> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstWorkTime> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstWorkTime GetByKey(Guid guidWorkTime)
        {
            return GetByKey(guidWorkTime, true);
        }
        public KstWorkTime GetByKey(Guid guidWorkTime, bool loadIncludes)
        {
            KstWorkTime item = null;
			var query = PredicateBuilder.True<KstWorkTime>();
                    
			string strWhere = @"GuidWorkTime = Guid(""" + guidWorkTime.ToString()+@""")";
            Expression<Func<KstWorkTime, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstWorkTime, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstWorkTime> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstWorkTime> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstWorkTime GetByKey(Guid guidWorkTime, params Expression<Func<KstWorkTime, object>>[] includes)
        {
            KstWorkTime item = null;
			string strWhere = @"GuidWorkTime = Guid(""" + guidWorkTime.ToString()+@""")";
          Expression<Func<KstWorkTime, bool>> predicate = p=> p.GuidWorkTime == guidWorkTime;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstWorkTime, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstWorkTime GetByKey(Guid guidWorkTime, string includes)
        {
            KstWorkTime item = null;
			string strWhere = @"GuidWorkTime = Guid(""" + guidWorkTime.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstWorkTime GetByKey(Guid guidWorkTime, string usemode, string includes)
		{
			return GetByKey(guidWorkTime, usemode, null, includes);

		 }
		 public KstWorkTime GetByKey(Guid guidWorkTime, string usemode, ContextRequest context,  string includes)
        {
            KstWorkTime item = null;
			string strWhere = @"GuidWorkTime = Guid(""" + guidWorkTime.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstWorkTime, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstWorkTime>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate, params Expression<Func<KstWorkTime, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstActivity,KstProject,KstActivityType";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstWorkTime>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstWorkTime,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstWorkTime> result = null;
               BusinessRulesEventArgs<KstWorkTime>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstWorkTime>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstWorkTime>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstWorkTime>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstWorkTime>();
 				string fkIncludes = "KstActivity,KstProject,KstActivityType";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstWorkTime> query =  con.KstWorkTimes.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstWorkTime>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstWorkTime>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstWorkTime>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstWorkTime> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstActivity,KstProject,KstActivityType";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstWorkTime>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstWorkTime> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstWorkTime> result = new List<KstWorkTime>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstWorkTime>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstWorkTime>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstWorkTime>();
 				string fkIncludes = "KstActivity,KstProject,KstActivityType";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstWorkTime> query = con.KstWorkTimes.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstWorkTime>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstWorkTime,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstWorkTime>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstWorkTime GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstWorkTime(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.Title);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.Comments);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.Hours);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.GuidProject);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.GuidActivity);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.Bytes);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.DueDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.GuidActivityType);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.KstActivity);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.KstProject);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTime.PropertyNames.KstActivityType);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidWorkTime")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidWorkTime");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstWorkTimes", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstActivity":
					if (includesList.Contains(selected)){
                        linq = "it.KstActivity as KstActivity";
					}
                    else
						linq = "iif(it.KstActivity != null, KstActivity(it.KstActivity.GuidActivity, it.KstActivity.Name), null) as KstActivity";
 					break;
					case "KstProject":
					if (includesList.Contains(selected)){
                        linq = "it.KstProject as KstProject";
					}
                    else
						linq = "iif(it.KstProject != null, KstProject(it.KstProject.GuidProject, it.KstProject.Name), null) as KstProject";
 					break;
					case "KstActivityType":
					if (includesList.Contains(selected)){
                        linq = "it.KstActivityType as KstActivityType";
					}
                    else
						linq = "iif(it.KstActivityType != null, KstActivityType(it.KstActivityType.GuidActivityType, it.KstActivityType.Name), null) as KstActivityType";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstWorkTime> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstWorkTime>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstWorkTime> result = new List<KstWorkTime>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstWorkTimeFiles");

        }

        public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstWorkTime> GetBy(Expression<Func<KstWorkTime, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"Comments.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstActivity.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"it.KstProject.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"it.KstActivityType.Name.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstWorkTime> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstWorkTime> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstWorkTime> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstWorkTime> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstWorkTime> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstWorkTime> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstWorkTime Create(KstWorkTime entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstWorkTime Create(KstWorkTime entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstWorkTime itemForSave = new KstWorkTime();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstWorkTime> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidWorkTime == Guid.Empty)
                   {
                       entity.GuidWorkTime = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidWorkTime = entity.GuidWorkTime;
				  
		
			itemForSave.GuidWorkTime = entity.GuidWorkTime;

			itemForSave.Title = entity.Title;

			itemForSave.Comments = entity.Comments;

			itemForSave.Hours = entity.Hours;

			itemForSave.GuidProject = entity.GuidProject;

			itemForSave.GuidActivity = entity.GuidActivity;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

			itemForSave.DueDate = entity.DueDate;

			itemForSave.GuidActivityType = entity.GuidActivityType;

				
				con.KstWorkTimes.Add(itemForSave);



					//if (entity.KstActivity != null)
					//{
					//	var kstActivity = new KstActivity();
					//	kstActivity.GuidActivity = entity.KstActivity.GuidActivity;
					//	itemForSave.KstActivity = kstActivity;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstActivity>(con, itemForSave.KstActivity);
			
					//}




					//if (entity.KstProject != null)
					//{
					//	var kstProject = new KstProject();
					//	kstProject.GuidProject = entity.KstProject.GuidProject;
					//	itemForSave.KstProject = kstProject;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					//}






					//if (entity.KstActivityType != null)
					//{
					//	var kstActivityType = new KstActivityType();
					//	kstActivityType.GuidActivityType = entity.KstActivityType.GuidActivityType;
					//	itemForSave.KstActivityType = kstActivityType;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstActivityType>(con, itemForSave.KstActivityType);
			
					//}



                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstWorkTime>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstWorkTime", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstWorkTime> e = null;
        public void Create(List<KstWorkTime> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstWorkTime> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstWorkTime entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstWorkTime> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstWorkTime> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidWorkTime == Guid.Empty)
                   {
                       entity.GuidWorkTime = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidWorkTime = entity.GuidWorkTime;

			//entity.Title = entity.Title;

			//entity.Comments = entity.Comments;

			//entity.Hours = entity.Hours;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

			//entity.DueDate = entity.DueDate;

				
				



				    if (entity.KstActivity != null)
					{
						//var kstActivity = new KstActivity();
						entity.GuidActivity = entity.KstActivity.GuidActivity;
						//entity.KstActivity = kstActivity;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstActivity>(con, itemForSave.KstActivity);
			
					}




				    if (entity.KstProject != null)
					{
						//var kstProject = new KstProject();
						entity.GuidProject = entity.KstProject.GuidProject;
						//entity.KstProject = kstProject;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					}






				    if (entity.KstActivityType != null)
					{
						//var kstActivityType = new KstActivityType();
						entity.GuidActivityType = entity.KstActivityType.GuidActivityType;
						//entity.KstActivityType = kstActivityType;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstActivityType>(con, itemForSave.KstActivityType);
			
					}



                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstWorkTime> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstWorkTime item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstWorkTime item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstWorkTime> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstWorkTime>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstWorkTimes", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstWorkTime>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstWorkTime>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstWorkTime> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstWorkTime() { GuidWorkTime = entity.GuidWorkTime };

                    con.Entry<KstWorkTime>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstWorkTime> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion




				    if (entity.KstActivity != null)
					{
						//var kstActivity = new KstActivity();
						entity.GuidActivity = entity.KstActivity.GuidActivity;
						//entity.KstActivity = kstActivity;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstActivity>(con, itemForSave.KstActivity);
			
					}




				    if (entity.KstProject != null)
					{
						//var kstProject = new KstProject();
						entity.GuidProject = entity.KstProject.GuidProject;
						//entity.KstProject = kstProject;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					}






				    if (entity.KstActivityType != null)
					{
						//var kstActivityType = new KstActivityType();
						entity.GuidActivityType = entity.KstActivityType.GuidActivityType;
						//entity.KstActivityType = kstActivityType;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstActivityType>(con, itemForSave.KstActivityType);
			
					}



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstWorkTime Update(KstWorkTime entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstWorkTime Update(KstWorkTime entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstWorkTime  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidWorkTime == entity.GuidWorkTime, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstWorkTime> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstWorkTimesBR br = new KstWorkTimesBR(true );
               // var oldentity = br.GetBy("GuidWorkTime = Guid(\"" + entity.GuidWorkTime + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstWorkTimes.FirstOrDefault(p=> p.GuidWorkTime == entity.GuidWorkTime);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstWorkTimes", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstWorkTime.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstWorkTime.PropertyNames.UpdatedBy);
				}

           


					


					
					


					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstWorkTime Save(KstWorkTime entity)
        {
			return Create(entity);
        }
        public int Save(List<KstWorkTime> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstWorkTime entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstWorkTime entity, ContextRequest contextRequest)
        {
				
				  List<KstWorkTime> entities = new List<KstWorkTime>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstWorkTimesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstWorkTime entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstWorkTime> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstWorkTime> _e = null;
               List<KstWorkTime> _items = new List<KstWorkTime>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstWorkTime>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstWorkTimesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstWorkTime> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstWorkTime> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstWorkTime> eToChilds = new BusinessRulesEventArgs<KstWorkTime>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstWorkTime item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstWorkTime>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstWorkTime, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstWorkTime, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstWorkTime>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstWorkTime> query = con.KstWorkTimes.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstActivity,KstProject,KstActivityType";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstWorkTime>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstWorkTime>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstWorkTime> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstWorkTime>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstWorkTimes.Where(predicate).Count();
					
                }else
                    return con.KstWorkTimes.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstFilesBR:BRBase<KstFile>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstFile> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstFile> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstFile> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstFile> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstFile> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstFile> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstFile> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstFile> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstFile> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstFile> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstFile> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstFile> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstFile> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstFile> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstFile> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstFile> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstFile> e);
          
            #endregion
			
		private static KstFilesBR singlenton =null;
				public static KstFilesBR NewInstance(){
					return  new KstFilesBR();
					
				}
		public static KstFilesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstFilesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstFilesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstFile";

            context = new EFContext();
        }
		 public KstFilesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstFile";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstFile> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstFiles.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstFile> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstFile> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstFile GetByKey(Guid guidFile)
        {
            return GetByKey(guidFile, true);
        }
        public KstFile GetByKey(Guid guidFile, bool loadIncludes)
        {
            KstFile item = null;
			var query = PredicateBuilder.True<KstFile>();
                    
			string strWhere = @"GuidFile = Guid(""" + guidFile.ToString()+@""")";
            Expression<Func<KstFile, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstFile> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstFile> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstFile GetByKey(Guid guidFile, params Expression<Func<KstFile, object>>[] includes)
        {
            KstFile item = null;
			string strWhere = @"GuidFile = Guid(""" + guidFile.ToString()+@""")";
          Expression<Func<KstFile, bool>> predicate = p=> p.GuidFile == guidFile;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstFile GetByKey(Guid guidFile, string includes)
        {
            KstFile item = null;
			string strWhere = @"GuidFile = Guid(""" + guidFile.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstFile GetByKey(Guid guidFile, string usemode, string includes)
		{
			return GetByKey(guidFile, usemode, null, includes);

		 }
		 public KstFile GetByKey(Guid guidFile, string usemode, ContextRequest context,  string includes)
        {
            KstFile item = null;
			string strWhere = @"GuidFile = Guid(""" + guidFile.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstFile, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstFile>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate, params Expression<Func<KstFile, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstFile>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstFile,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstFile> result = null;
               BusinessRulesEventArgs<KstFile>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstFile>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstFile>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstFile>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstFile>();
                
                //var es = _repository.Queryable;

                IQueryable<KstFile> query =  con.KstFiles.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstFile>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstFile>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstFile>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstFile> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstFile>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstFile> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstFile> result = new List<KstFile>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstFile>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstFile>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstFile>();
                
                //var es = _repository.Queryable;
				IQueryable<KstFile> query = con.KstFiles.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstFile>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstFile,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstFile>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstFile GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstFile(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.FileName);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.FileType);
					if (includesList.Contains(KstFile.PropertyNames.FileData))
					    contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.FileData);
					
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.FileStorage);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.ContainerStorage);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.FileThumbSizes);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.FileSize);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstFile.PropertyNames.Bytes);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidFile")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidFile");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstFiles", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstFile> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstFile>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstFile> result = new List<KstFile>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstProjectFiles,KstUserFiles,KstWorkTimeFiles");

        }

        public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstFile> GetBy(Expression<Func<KstFile, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"FileName.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"FileType.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"FileStorage.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"ContainerStorage.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"FileThumbSizes.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstFile> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstFile> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstFile> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstFile Create(KstFile entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstFile Create(KstFile entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstFile itemForSave = new KstFile();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstFile> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidFile == Guid.Empty)
                   {
                       entity.GuidFile = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidFile = entity.GuidFile;
				  
		
			itemForSave.GuidFile = entity.GuidFile;

			itemForSave.FileName = entity.FileName;

			itemForSave.FileType = entity.FileType;

			itemForSave.FileData = entity.FileData;

			itemForSave.FileStorage = entity.FileStorage;

			itemForSave.ContainerStorage = entity.ContainerStorage;

			itemForSave.FileThumbSizes = entity.FileThumbSizes;

			itemForSave.FileSize = entity.FileSize;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

				
				con.KstFiles.Add(itemForSave);








                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstFile>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstFile", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstFile> e = null;
        public void Create(List<KstFile> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstFile> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstFile entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstFile> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstFile> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidFile == Guid.Empty)
                   {
                       entity.GuidFile = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidFile = entity.GuidFile;

			//entity.FileName = entity.FileName;

			//entity.FileType = entity.FileType;

			//entity.FileData = entity.FileData;

			//entity.FileStorage = entity.FileStorage;

			//entity.ContainerStorage = entity.ContainerStorage;

			//entity.FileThumbSizes = entity.FileThumbSizes;

			//entity.FileSize = entity.FileSize;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				








                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstFile> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstFile item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstFile item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstFile> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstFile>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstFiles", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstFile>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstFile>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstFile> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstFile() { GuidFile = entity.GuidFile };

                    con.Entry<KstFile>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstFile> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion









				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstFile Update(KstFile entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstFile Update(KstFile entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstFile  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidFile == entity.GuidFile, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstFile> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstFilesBR br = new KstFilesBR(true );
               // var oldentity = br.GetBy("GuidFile = Guid(\"" + entity.GuidFile + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstFiles.FirstOrDefault(p=> p.GuidFile == entity.GuidFile);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstFiles", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstFile.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstFile.PropertyNames.UpdatedBy);
				}

           
					
					
					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstFile Save(KstFile entity)
        {
			return Create(entity);
        }
        public int Save(List<KstFile> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstFile entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstFile entity, ContextRequest contextRequest)
        {
				
				  List<KstFile> entities = new List<KstFile>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstFilesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstFile entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstFile> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstFile> _e = null;
               List<KstFile> _items = new List<KstFile>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstFile>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstFilesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstFile> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstFile> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstFile> eToChilds = new BusinessRulesEventArgs<KstFile>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstFile item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstFile>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstFile, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstFile, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstFile>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstFile> query = con.KstFiles.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstFile>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstFile>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstFile> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstFile>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstFiles.Where(predicate).Count();
					
                }else
                    return con.KstFiles.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstProjectFilesBR:BRBase<KstProjectFile>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstProjectFile> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstProjectFile> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstProjectFile> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstProjectFile> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstProjectFile> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstProjectFile> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstProjectFile> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstProjectFile> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstProjectFile> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstProjectFile> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstProjectFile> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstProjectFile> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstProjectFile> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstProjectFile> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstProjectFile> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstProjectFile> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstProjectFile> e);
          
            #endregion
			
		private static KstProjectFilesBR singlenton =null;
				public static KstProjectFilesBR NewInstance(){
					return  new KstProjectFilesBR();
					
				}
		public static KstProjectFilesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstProjectFilesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstProjectFilesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstProjectFile";

            context = new EFContext();
        }
		 public KstProjectFilesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstProjectFile";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstProjectFile> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstProjectFiles.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstProjectFile> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstProjectFile> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstProjectFile GetByKey(Guid guidProjectFile)
        {
            return GetByKey(guidProjectFile, true);
        }
        public KstProjectFile GetByKey(Guid guidProjectFile, bool loadIncludes)
        {
            KstProjectFile item = null;
			var query = PredicateBuilder.True<KstProjectFile>();
                    
			string strWhere = @"GuidProjectFile = Guid(""" + guidProjectFile.ToString()+@""")";
            Expression<Func<KstProjectFile, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProjectFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstProjectFile> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstProjectFile> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstProjectFile GetByKey(Guid guidProjectFile, params Expression<Func<KstProjectFile, object>>[] includes)
        {
            KstProjectFile item = null;
			string strWhere = @"GuidProjectFile = Guid(""" + guidProjectFile.ToString()+@""")";
          Expression<Func<KstProjectFile, bool>> predicate = p=> p.GuidProjectFile == guidProjectFile;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProjectFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstProjectFile GetByKey(Guid guidProjectFile, string includes)
        {
            KstProjectFile item = null;
			string strWhere = @"GuidProjectFile = Guid(""" + guidProjectFile.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstProjectFile GetByKey(Guid guidProjectFile, string usemode, string includes)
		{
			return GetByKey(guidProjectFile, usemode, null, includes);

		 }
		 public KstProjectFile GetByKey(Guid guidProjectFile, string usemode, ContextRequest context,  string includes)
        {
            KstProjectFile item = null;
			string strWhere = @"GuidProjectFile = Guid(""" + guidProjectFile.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstProjectFile, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstProjectFile>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate, params Expression<Func<KstProjectFile, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstFile,KstProject";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstProjectFile>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstProjectFile,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstProjectFile> result = null;
               BusinessRulesEventArgs<KstProjectFile>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstProjectFile>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstProjectFile>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstProjectFile>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstProjectFile>();
 				string fkIncludes = "KstFile,KstProject";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstProjectFile> query =  con.KstProjectFiles.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstProjectFile>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstProjectFile>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstProjectFile>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstProjectFile> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstFile,KstProject";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProjectFile>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstProjectFile> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstProjectFile> result = new List<KstProjectFile>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstProjectFile>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstProjectFile>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstProjectFile>();
 				string fkIncludes = "KstFile,KstProject";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstProjectFile> query = con.KstProjectFiles.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstProjectFile>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstProjectFile,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstProjectFile>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstProjectFile GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstProjectFile(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.GuidProject);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.GuidFile);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.Bytes);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.KstFile);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProjectFile.PropertyNames.KstProject);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidProjectFile")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidProjectFile");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstProjectFiles", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstFile":
					if (includesList.Contains(selected)){
                        linq = "it.KstFile as KstFile";
					}
                    else
						linq = "iif(it.KstFile != null, KstFile(it.KstFile.GuidFile, it.KstFile.FileName), null) as KstFile";
 					break;
					case "KstProject":
					if (includesList.Contains(selected)){
                        linq = "it.KstProject as KstProject";
					}
                    else
						linq = "iif(it.KstProject != null, KstProject(it.KstProject.GuidProject, it.KstProject.Name), null) as KstProject";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstProjectFile> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstProjectFile>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstProjectFile> result = new List<KstProjectFile>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstProjectFile> GetBy(Expression<Func<KstProjectFile, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstFile.FileName.Contains(""{0}"")", word)+" OR "+string.Format(@"it.KstProject.Name.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstProjectFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstProjectFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstProjectFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstProjectFile> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstProjectFile> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstProjectFile> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstProjectFile Create(KstProjectFile entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstProjectFile Create(KstProjectFile entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstProjectFile itemForSave = new KstProjectFile();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstProjectFile> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidProjectFile == Guid.Empty)
                   {
                       entity.GuidProjectFile = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidProjectFile = entity.GuidProjectFile;
				  
		
			itemForSave.GuidProjectFile = entity.GuidProjectFile;

			itemForSave.GuidProject = entity.GuidProject;

			itemForSave.GuidFile = entity.GuidFile;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

				
				con.KstProjectFiles.Add(itemForSave);



					//if (entity.KstFile != null)
					//{
					//	var kstFile = new KstFile();
					//	kstFile.GuidFile = entity.KstFile.GuidFile;
					//	itemForSave.KstFile = kstFile;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					//}




					//if (entity.KstProject != null)
					//{
					//	var kstProject = new KstProject();
					//	kstProject.GuidProject = entity.KstProject.GuidProject;
					//	itemForSave.KstProject = kstProject;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					//}



                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstProjectFile>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstProjectFile", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstProjectFile> e = null;
        public void Create(List<KstProjectFile> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstProjectFile> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstProjectFile entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstProjectFile> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstProjectFile> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidProjectFile == Guid.Empty)
                   {
                       entity.GuidProjectFile = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidProjectFile = entity.GuidProjectFile;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				



				    if (entity.KstFile != null)
					{
						//var kstFile = new KstFile();
						entity.GuidFile = entity.KstFile.GuidFile;
						//entity.KstFile = kstFile;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					}




				    if (entity.KstProject != null)
					{
						//var kstProject = new KstProject();
						entity.GuidProject = entity.KstProject.GuidProject;
						//entity.KstProject = kstProject;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					}



                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstProjectFile> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstProjectFile item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstProjectFile item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstProjectFile> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstProjectFile>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProjectFiles", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstProjectFile>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstProjectFile>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstProjectFile> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstProjectFile() { GuidProjectFile = entity.GuidProjectFile };

                    con.Entry<KstProjectFile>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstProjectFile> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion




				    if (entity.KstFile != null)
					{
						//var kstFile = new KstFile();
						entity.GuidFile = entity.KstFile.GuidFile;
						//entity.KstFile = kstFile;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					}




				    if (entity.KstProject != null)
					{
						//var kstProject = new KstProject();
						entity.GuidProject = entity.KstProject.GuidProject;
						//entity.KstProject = kstProject;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProject>(con, itemForSave.KstProject);
			
					}



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstProjectFile Update(KstProjectFile entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstProjectFile Update(KstProjectFile entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstProjectFile  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidProjectFile == entity.GuidProjectFile, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstProjectFile> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstProjectFilesBR br = new KstProjectFilesBR(true );
               // var oldentity = br.GetBy("GuidProjectFile = Guid(\"" + entity.GuidProjectFile + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstProjectFiles.FirstOrDefault(p=> p.GuidProjectFile == entity.GuidProjectFile);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProjectFiles", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstProjectFile.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstProjectFile.PropertyNames.UpdatedBy);
				}

           


					


					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstProjectFile Save(KstProjectFile entity)
        {
			return Create(entity);
        }
        public int Save(List<KstProjectFile> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstProjectFile entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstProjectFile entity, ContextRequest contextRequest)
        {
				
				  List<KstProjectFile> entities = new List<KstProjectFile>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstProjectFilesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstProjectFile entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstProjectFile> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstProjectFile> _e = null;
               List<KstProjectFile> _items = new List<KstProjectFile>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstProjectFile>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstProjectFilesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstProjectFile> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstProjectFile> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstProjectFile> eToChilds = new BusinessRulesEventArgs<KstProjectFile>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstProjectFile item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstProjectFile>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstProjectFile, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstProjectFile, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstProjectFile>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstProjectFile> query = con.KstProjectFiles.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstFile,KstProject";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProjectFile>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstProjectFile>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstProjectFile> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstProjectFile>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstProjectFiles.Where(predicate).Count();
					
                }else
                    return con.KstProjectFiles.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstUserFilesBR:BRBase<KstUserFile>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstUserFile> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstUserFile> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstUserFile> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstUserFile> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstUserFile> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstUserFile> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstUserFile> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstUserFile> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstUserFile> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstUserFile> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstUserFile> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstUserFile> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstUserFile> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstUserFile> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstUserFile> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstUserFile> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstUserFile> e);
          
            #endregion
			
		private static KstUserFilesBR singlenton =null;
				public static KstUserFilesBR NewInstance(){
					return  new KstUserFilesBR();
					
				}
		public static KstUserFilesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstUserFilesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstUserFilesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstUserFile";

            context = new EFContext();
        }
		 public KstUserFilesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstUserFile";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstUserFile> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstUserFiles.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstUserFile> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstUserFile> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstUserFile GetByKey(Guid guidUserFile)
        {
            return GetByKey(guidUserFile, true);
        }
        public KstUserFile GetByKey(Guid guidUserFile, bool loadIncludes)
        {
            KstUserFile item = null;
			var query = PredicateBuilder.True<KstUserFile>();
                    
			string strWhere = @"GuidUserFile = Guid(""" + guidUserFile.ToString()+@""")";
            Expression<Func<KstUserFile, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstUserFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstUserFile> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstUserFile> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstUserFile GetByKey(Guid guidUserFile, params Expression<Func<KstUserFile, object>>[] includes)
        {
            KstUserFile item = null;
			string strWhere = @"GuidUserFile = Guid(""" + guidUserFile.ToString()+@""")";
          Expression<Func<KstUserFile, bool>> predicate = p=> p.GuidUserFile == guidUserFile;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstUserFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstUserFile GetByKey(Guid guidUserFile, string includes)
        {
            KstUserFile item = null;
			string strWhere = @"GuidUserFile = Guid(""" + guidUserFile.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstUserFile GetByKey(Guid guidUserFile, string usemode, string includes)
		{
			return GetByKey(guidUserFile, usemode, null, includes);

		 }
		 public KstUserFile GetByKey(Guid guidUserFile, string usemode, ContextRequest context,  string includes)
        {
            KstUserFile item = null;
			string strWhere = @"GuidUserFile = Guid(""" + guidUserFile.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstUserFile, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstUserFile>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate, params Expression<Func<KstUserFile, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstFile,KstProxyUser";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstUserFile>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstUserFile,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstUserFile> result = null;
               BusinessRulesEventArgs<KstUserFile>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstUserFile>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstUserFile>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstUserFile>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstUserFile>();
 				string fkIncludes = "KstFile,KstProxyUser";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstUserFile> query =  con.KstUserFiles.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstUserFile>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstUserFile>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstUserFile>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstUserFile> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstFile,KstProxyUser";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstUserFile>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstUserFile> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstUserFile> result = new List<KstUserFile>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstUserFile>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstUserFile>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstUserFile>();
 				string fkIncludes = "KstFile,KstProxyUser";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstUserFile> query = con.KstUserFiles.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstUserFile>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstUserFile,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstUserFile>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstUserFile GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstUserFile(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.GuidUser);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.GuidFile);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.IsProfileDefault);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.Bytes);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.KstFile);
					contextRequest.CustomQuery.SpecificProperties.Add(KstUserFile.PropertyNames.KstProxyUser);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidUserFile")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidUserFile");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstUserFiles", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstFile":
					if (includesList.Contains(selected)){
                        linq = "it.KstFile as KstFile";
					}
                    else
						linq = "iif(it.KstFile != null, KstFile(it.KstFile.GuidFile, it.KstFile.FileName), null) as KstFile";
 					break;
					case "KstProxyUser":
					if (includesList.Contains(selected)){
                        linq = "it.KstProxyUser as KstProxyUser";
					}
                    else
						linq = "iif(it.KstProxyUser != null, KstProxyUser(it.KstProxyUser.GuidUser, it.KstProxyUser.DisplayName), null) as KstProxyUser";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstUserFile> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstUserFile>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstUserFile> result = new List<KstUserFile>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstUserFile> GetBy(Expression<Func<KstUserFile, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstFile.FileName.Contains(""{0}"")", word)+" OR "+string.Format(@"it.KstProxyUser.DisplayName.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstUserFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstUserFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstUserFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstUserFile> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstUserFile> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstUserFile> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstUserFile Create(KstUserFile entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstUserFile Create(KstUserFile entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstUserFile itemForSave = new KstUserFile();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstUserFile> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidUserFile == Guid.Empty)
                   {
                       entity.GuidUserFile = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidUserFile = entity.GuidUserFile;
				  
		
			itemForSave.GuidUserFile = entity.GuidUserFile;

			itemForSave.GuidUser = entity.GuidUser;

			itemForSave.GuidFile = entity.GuidFile;

			itemForSave.IsProfileDefault = entity.IsProfileDefault;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

				
				con.KstUserFiles.Add(itemForSave);



					//if (entity.KstFile != null)
					//{
					//	var kstFile = new KstFile();
					//	kstFile.GuidFile = entity.KstFile.GuidFile;
					//	itemForSave.KstFile = kstFile;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					//}




					//if (entity.KstProxyUser != null)
					//{
					//	var kstProxyUser = new KstProxyUser();
					//	kstProxyUser.GuidUser = entity.KstProxyUser.GuidUser;
					//	itemForSave.KstProxyUser = kstProxyUser;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyUser>(con, itemForSave.KstProxyUser);
			
					//}



                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstUserFile>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstUserFile", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstUserFile> e = null;
        public void Create(List<KstUserFile> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstUserFile> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstUserFile entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstUserFile> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstUserFile> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidUserFile == Guid.Empty)
                   {
                       entity.GuidUserFile = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidUserFile = entity.GuidUserFile;

			//entity.IsProfileDefault = entity.IsProfileDefault;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				



				    if (entity.KstFile != null)
					{
						//var kstFile = new KstFile();
						entity.GuidFile = entity.KstFile.GuidFile;
						//entity.KstFile = kstFile;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					}




				    if (entity.KstProxyUser != null)
					{
						//var kstProxyUser = new KstProxyUser();
						entity.GuidUser = entity.KstProxyUser.GuidUser;
						//entity.KstProxyUser = kstProxyUser;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyUser>(con, itemForSave.KstProxyUser);
			
					}



                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstUserFile> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstUserFile item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstUserFile item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstUserFile> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstUserFile>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstUserFiles", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstUserFile>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstUserFile>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstUserFile> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstUserFile() { GuidUserFile = entity.GuidUserFile };

                    con.Entry<KstUserFile>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstUserFile> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion




				    if (entity.KstFile != null)
					{
						//var kstFile = new KstFile();
						entity.GuidFile = entity.KstFile.GuidFile;
						//entity.KstFile = kstFile;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					}




				    if (entity.KstProxyUser != null)
					{
						//var kstProxyUser = new KstProxyUser();
						entity.GuidUser = entity.KstProxyUser.GuidUser;
						//entity.KstProxyUser = kstProxyUser;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyUser>(con, itemForSave.KstProxyUser);
			
					}



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstUserFile Update(KstUserFile entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstUserFile Update(KstUserFile entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstUserFile  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidUserFile == entity.GuidUserFile, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstUserFile> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstUserFilesBR br = new KstUserFilesBR(true );
               // var oldentity = br.GetBy("GuidUserFile = Guid(\"" + entity.GuidUserFile + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstUserFiles.FirstOrDefault(p=> p.GuidUserFile == entity.GuidUserFile);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstUserFiles", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstUserFile.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstUserFile.PropertyNames.UpdatedBy);
				}

           


					


					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstUserFile Save(KstUserFile entity)
        {
			return Create(entity);
        }
        public int Save(List<KstUserFile> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstUserFile entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstUserFile entity, ContextRequest contextRequest)
        {
				
				  List<KstUserFile> entities = new List<KstUserFile>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstUserFilesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstUserFile entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstUserFile> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstUserFile> _e = null;
               List<KstUserFile> _items = new List<KstUserFile>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstUserFile>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstUserFilesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstUserFile> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstUserFile> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstUserFile> eToChilds = new BusinessRulesEventArgs<KstUserFile>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstUserFile item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstUserFile>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstUserFile, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstUserFile, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstUserFile>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstUserFile> query = con.KstUserFiles.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstFile,KstProxyUser";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstUserFile>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstUserFile>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstUserFile> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstUserFile>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstUserFiles.Where(predicate).Count();
					
                }else
                    return con.KstUserFiles.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstWorkTimeFilesBR:BRBase<KstWorkTimeFile>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstWorkTimeFile> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstWorkTimeFile> e);
          
            #endregion
			
		private static KstWorkTimeFilesBR singlenton =null;
				public static KstWorkTimeFilesBR NewInstance(){
					return  new KstWorkTimeFilesBR();
					
				}
		public static KstWorkTimeFilesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstWorkTimeFilesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstWorkTimeFilesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstWorkTimeFile";

            context = new EFContext();
        }
		 public KstWorkTimeFilesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstWorkTimeFile";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstWorkTimeFile> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstWorkTimeFiles.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstWorkTimeFile> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstWorkTimeFile> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstWorkTimeFile GetByKey(Guid guidWorkTimeFile)
        {
            return GetByKey(guidWorkTimeFile, true);
        }
        public KstWorkTimeFile GetByKey(Guid guidWorkTimeFile, bool loadIncludes)
        {
            KstWorkTimeFile item = null;
			var query = PredicateBuilder.True<KstWorkTimeFile>();
                    
			string strWhere = @"GuidWorkTimeFile = Guid(""" + guidWorkTimeFile.ToString()+@""")";
            Expression<Func<KstWorkTimeFile, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstWorkTimeFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstWorkTimeFile> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstWorkTimeFile> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstWorkTimeFile GetByKey(Guid guidWorkTimeFile, params Expression<Func<KstWorkTimeFile, object>>[] includes)
        {
            KstWorkTimeFile item = null;
			string strWhere = @"GuidWorkTimeFile = Guid(""" + guidWorkTimeFile.ToString()+@""")";
          Expression<Func<KstWorkTimeFile, bool>> predicate = p=> p.GuidWorkTimeFile == guidWorkTimeFile;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstWorkTimeFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstWorkTimeFile GetByKey(Guid guidWorkTimeFile, string includes)
        {
            KstWorkTimeFile item = null;
			string strWhere = @"GuidWorkTimeFile = Guid(""" + guidWorkTimeFile.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstWorkTimeFile GetByKey(Guid guidWorkTimeFile, string usemode, string includes)
		{
			return GetByKey(guidWorkTimeFile, usemode, null, includes);

		 }
		 public KstWorkTimeFile GetByKey(Guid guidWorkTimeFile, string usemode, ContextRequest context,  string includes)
        {
            KstWorkTimeFile item = null;
			string strWhere = @"GuidWorkTimeFile = Guid(""" + guidWorkTimeFile.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstWorkTimeFile, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstWorkTimeFile>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate, params Expression<Func<KstWorkTimeFile, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstFile,KstWorkTime";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstWorkTimeFile>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstWorkTimeFile,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstWorkTimeFile> result = null;
               BusinessRulesEventArgs<KstWorkTimeFile>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstWorkTimeFile>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstWorkTimeFile>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstWorkTimeFile>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstWorkTimeFile>();
 				string fkIncludes = "KstFile,KstWorkTime";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstWorkTimeFile> query =  con.KstWorkTimeFiles.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstWorkTimeFile>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstWorkTimeFile>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstWorkTimeFile>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstWorkTimeFile> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstFile,KstWorkTime";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstWorkTimeFile>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstWorkTimeFile> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstWorkTimeFile> result = new List<KstWorkTimeFile>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstWorkTimeFile>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstWorkTimeFile>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstWorkTimeFile>();
 				string fkIncludes = "KstFile,KstWorkTime";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstWorkTimeFile> query = con.KstWorkTimeFiles.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstWorkTimeFile>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstWorkTimeFile,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstWorkTimeFile>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstWorkTimeFile GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstWorkTimeFile(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.GuidWorkTime);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.GuidFile);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.Bytes);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.KstFile);
					contextRequest.CustomQuery.SpecificProperties.Add(KstWorkTimeFile.PropertyNames.KstWorkTime);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidWorkTimeFile")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidWorkTimeFile");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstWorkTimeFiles", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstFile":
					if (includesList.Contains(selected)){
                        linq = "it.KstFile as KstFile";
					}
                    else
						linq = "iif(it.KstFile != null, KstFile(it.KstFile.GuidFile, it.KstFile.FileName), null) as KstFile";
 					break;
					case "KstWorkTime":
					if (includesList.Contains(selected)){
                        linq = "it.KstWorkTime as KstWorkTime";
					}
                    else
						linq = "iif(it.KstWorkTime != null, KstWorkTime(it.KstWorkTime.GuidWorkTime, it.KstWorkTime.Title), null) as KstWorkTime";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstWorkTimeFile> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstWorkTimeFile>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstWorkTimeFile> result = new List<KstWorkTimeFile>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstWorkTimeFile> GetBy(Expression<Func<KstWorkTimeFile, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstFile.FileName.Contains(""{0}"")", word)+" OR "+string.Format(@"it.KstWorkTime.Title.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstWorkTimeFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstWorkTimeFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstWorkTimeFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstWorkTimeFile> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstWorkTimeFile> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstWorkTimeFile> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstWorkTimeFile Create(KstWorkTimeFile entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstWorkTimeFile Create(KstWorkTimeFile entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstWorkTimeFile itemForSave = new KstWorkTimeFile();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstWorkTimeFile> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidWorkTimeFile == Guid.Empty)
                   {
                       entity.GuidWorkTimeFile = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidWorkTimeFile = entity.GuidWorkTimeFile;
				  
		
			itemForSave.GuidWorkTimeFile = entity.GuidWorkTimeFile;

			itemForSave.GuidWorkTime = entity.GuidWorkTime;

			itemForSave.GuidFile = entity.GuidFile;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

				
				con.KstWorkTimeFiles.Add(itemForSave);



					//if (entity.KstFile != null)
					//{
					//	var kstFile = new KstFile();
					//	kstFile.GuidFile = entity.KstFile.GuidFile;
					//	itemForSave.KstFile = kstFile;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					//}




					//if (entity.KstWorkTime != null)
					//{
					//	var kstWorkTime = new KstWorkTime();
					//	kstWorkTime.GuidWorkTime = entity.KstWorkTime.GuidWorkTime;
					//	itemForSave.KstWorkTime = kstWorkTime;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstWorkTime>(con, itemForSave.KstWorkTime);
			
					//}



                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstWorkTimeFile>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstWorkTimeFile", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstWorkTimeFile> e = null;
        public void Create(List<KstWorkTimeFile> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstWorkTimeFile> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstWorkTimeFile entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstWorkTimeFile> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstWorkTimeFile> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidWorkTimeFile == Guid.Empty)
                   {
                       entity.GuidWorkTimeFile = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidWorkTimeFile = entity.GuidWorkTimeFile;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				



				    if (entity.KstFile != null)
					{
						//var kstFile = new KstFile();
						entity.GuidFile = entity.KstFile.GuidFile;
						//entity.KstFile = kstFile;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					}




				    if (entity.KstWorkTime != null)
					{
						//var kstWorkTime = new KstWorkTime();
						entity.GuidWorkTime = entity.KstWorkTime.GuidWorkTime;
						//entity.KstWorkTime = kstWorkTime;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstWorkTime>(con, itemForSave.KstWorkTime);
			
					}



                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstWorkTimeFile> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstWorkTimeFile item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstWorkTimeFile item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstWorkTimeFile> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstWorkTimeFile>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstWorkTimeFiles", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstWorkTimeFile>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstWorkTimeFile>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstWorkTimeFile> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstWorkTimeFile() { GuidWorkTimeFile = entity.GuidWorkTimeFile };

                    con.Entry<KstWorkTimeFile>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstWorkTimeFile> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion




				    if (entity.KstFile != null)
					{
						//var kstFile = new KstFile();
						entity.GuidFile = entity.KstFile.GuidFile;
						//entity.KstFile = kstFile;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstFile>(con, itemForSave.KstFile);
			
					}




				    if (entity.KstWorkTime != null)
					{
						//var kstWorkTime = new KstWorkTime();
						entity.GuidWorkTime = entity.KstWorkTime.GuidWorkTime;
						//entity.KstWorkTime = kstWorkTime;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstWorkTime>(con, itemForSave.KstWorkTime);
			
					}



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstWorkTimeFile Update(KstWorkTimeFile entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstWorkTimeFile Update(KstWorkTimeFile entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstWorkTimeFile  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidWorkTimeFile == entity.GuidWorkTimeFile, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstWorkTimeFile> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstWorkTimeFilesBR br = new KstWorkTimeFilesBR(true );
               // var oldentity = br.GetBy("GuidWorkTimeFile = Guid(\"" + entity.GuidWorkTimeFile + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstWorkTimeFiles.FirstOrDefault(p=> p.GuidWorkTimeFile == entity.GuidWorkTimeFile);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstWorkTimeFiles", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstWorkTimeFile.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstWorkTimeFile.PropertyNames.UpdatedBy);
				}

           


					


					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstWorkTimeFile Save(KstWorkTimeFile entity)
        {
			return Create(entity);
        }
        public int Save(List<KstWorkTimeFile> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstWorkTimeFile entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstWorkTimeFile entity, ContextRequest contextRequest)
        {
				
				  List<KstWorkTimeFile> entities = new List<KstWorkTimeFile>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstWorkTimeFilesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstWorkTimeFile entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstWorkTimeFile> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstWorkTimeFile> _e = null;
               List<KstWorkTimeFile> _items = new List<KstWorkTimeFile>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstWorkTimeFile>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstWorkTimeFilesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstWorkTimeFile> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstWorkTimeFile> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstWorkTimeFile> eToChilds = new BusinessRulesEventArgs<KstWorkTimeFile>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstWorkTimeFile item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstWorkTimeFile>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstWorkTimeFile, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstWorkTimeFile, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstWorkTimeFile>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstWorkTimeFile> query = con.KstWorkTimeFiles.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstFile,KstWorkTime";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstWorkTimeFile>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstWorkTimeFile>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstWorkTimeFile> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstWorkTimeFile>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstWorkTimeFiles.Where(predicate).Count();
					
                }else
                    return con.KstWorkTimeFiles.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstProxyRolesBR:BRBase<KstProxyRole>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstProxyRole> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstProxyRole> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstProxyRole> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstProxyRole> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstProxyRole> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstProxyRole> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstProxyRole> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstProxyRole> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstProxyRole> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstProxyRole> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstProxyRole> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstProxyRole> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstProxyRole> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstProxyRole> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstProxyRole> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstProxyRole> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstProxyRole> e);
          
            #endregion
			
		private static KstProxyRolesBR singlenton =null;
				public static KstProxyRolesBR NewInstance(){
					return  new KstProxyRolesBR();
					
				}
		public static KstProxyRolesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstProxyRolesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstProxyRolesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstProxyRole";

            context = new EFContext();
        }
		 public KstProxyRolesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstProxyRole";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstProxyRole> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstProxyRoles.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstProxyRole> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstProxyRole> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstProxyRole GetByKey(Guid guidRole)
        {
            return GetByKey(guidRole, true);
        }
        public KstProxyRole GetByKey(Guid guidRole, bool loadIncludes)
        {
            KstProxyRole item = null;
			var query = PredicateBuilder.True<KstProxyRole>();
                    
			string strWhere = @"GuidRole = Guid(""" + guidRole.ToString()+@""")";
            Expression<Func<KstProxyRole, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyRole, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstProxyRole> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstProxyRole> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstProxyRole GetByKey(Guid guidRole, params Expression<Func<KstProxyRole, object>>[] includes)
        {
            KstProxyRole item = null;
			string strWhere = @"GuidRole = Guid(""" + guidRole.ToString()+@""")";
          Expression<Func<KstProxyRole, bool>> predicate = p=> p.GuidRole == guidRole;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyRole, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstProxyRole GetByKey(Guid guidRole, string includes)
        {
            KstProxyRole item = null;
			string strWhere = @"GuidRole = Guid(""" + guidRole.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstProxyRole GetByKey(Guid guidRole, string usemode, string includes)
		{
			return GetByKey(guidRole, usemode, null, includes);

		 }
		 public KstProxyRole GetByKey(Guid guidRole, string usemode, ContextRequest context,  string includes)
        {
            KstProxyRole item = null;
			string strWhere = @"GuidRole = Guid(""" + guidRole.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstProxyRole, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstProxyRole>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate, params Expression<Func<KstProxyRole, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstProxyRole>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					Expression<Func<KstProxyRole,bool>> multitenantExpression = null;
 
                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstProxyRole> result = null;
               BusinessRulesEventArgs<KstProxyRole>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstProxyRole>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstProxyRole>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstProxyRole>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstProxyRole>();
                
                //var es = _repository.Queryable;

                IQueryable<KstProxyRole> query =  con.KstProxyRoles.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstProxyRole>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstProxyRole>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstProxyRole>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstProxyRole> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyRole>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstProxyRole> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstProxyRole> result = new List<KstProxyRole>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstProxyRole>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstProxyRole>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstProxyRole>();
                
                //var es = _repository.Queryable;
				IQueryable<KstProxyRole> query = con.KstProxyRoles.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


				//string predicateString = predicate.ToDynamicLinq<KstProxyRole>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstProxyRole,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstProxyRole>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstProxyRole GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 

                return GetSummaryOperation(con, new KstProxyRole(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyRole.PropertyNames.RoleName);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyRole.PropertyNames.NameKey);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyRole.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyRole.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyRole.PropertyNames.CreatedDate);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidRole")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidRole");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstProxyRoles", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstProxyRole> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstProxyRole>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstProxyRole> result = new List<KstProxyRole>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstProxyUsers");

        }

        public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstProxyRole> GetBy(Expression<Func<KstProxyRole, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"RoleName.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"NameKey.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstProxyRole> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstProxyRole> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstProxyRole> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstProxyRole> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstProxyRole> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstProxyRole> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstProxyRole Create(KstProxyRole entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstProxyRole Create(KstProxyRole entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstProxyRole itemForSave = new KstProxyRole();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	
	


			}
#endregion
               BusinessRulesEventArgs<KstProxyRole> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidRole == Guid.Empty)
                   {
                       entity.GuidRole = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidRole = entity.GuidRole;
				  
		
			itemForSave.GuidRole = entity.GuidRole;

			itemForSave.RoleName = entity.RoleName;

			itemForSave.NameKey = entity.NameKey;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.CreatedDate = entity.CreatedDate;

				
				con.KstProxyRoles.Add(itemForSave);




                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstProxyRole>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstProxyRole", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstProxyRole> e = null;
        public void Create(List<KstProxyRole> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstProxyRole> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstProxyRole entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstProxyRole> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstProxyRole> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidRole == Guid.Empty)
                   {
                       entity.GuidRole = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	
	


			}
#endregion


		
			//entity.GuidRole = entity.GuidRole;

			//entity.RoleName = entity.RoleName;

			//entity.NameKey = entity.NameKey;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.CreatedDate = entity.CreatedDate;

				
				




                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstProxyRole> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstProxyRole item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstProxyRole item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstProxyRole> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstProxyRole>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProxyRoles", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   



                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstProxyRole>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstProxyRole>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstProxyRole> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstProxyRole() { GuidRole = entity.GuidRole };

                    con.Entry<KstProxyRole>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstProxyRole> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	



			}
#endregion





				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstProxyRole Update(KstProxyRole entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstProxyRole Update(KstProxyRole entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstProxyRole  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();

//	    var oldentity = GetBy(p => p.GuidRole == entity.GuidRole, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
			
	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstProxyRole> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstProxyRolesBR br = new KstProxyRolesBR(true );
               // var oldentity = br.GetBy("GuidRole = Guid(\"" + entity.GuidRole + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstProxyRoles.FirstOrDefault(p=> p.GuidRole == entity.GuidRole);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProxyRoles", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstProxyRole.PropertyNames.UpdatedDate);

           
					

				
		  
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstProxyRole Save(KstProxyRole entity)
        {
			return Create(entity);
        }
        public int Save(List<KstProxyRole> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstProxyRole entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstProxyRole entity, ContextRequest contextRequest)
        {
				
				  List<KstProxyRole> entities = new List<KstProxyRole>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstProxyRolesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstProxyRole entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstProxyRole> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstProxyRole> _e = null;
               List<KstProxyRole> _items = new List<KstProxyRole>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedDate");

						
					}
					else {
					con.Entry<KstProxyRole>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstProxyRolesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedDate");
        }

         public void Delete(List<KstProxyRole> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstProxyRole> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstProxyRole> eToChilds = new BusinessRulesEventArgs<KstProxyRole>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstProxyRole item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstProxyRole>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstProxyRole, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstProxyRole, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstProxyRole>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
				
				IQueryable<KstProxyRole> query = con.KstProxyRoles.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyRole>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstProxyRole>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstProxyRole> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstProxyRole>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstProxyRoles.Where(predicate).Count();
					
                }else
                    return con.KstProxyRoles.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstProxyUsersBR:BRBase<KstProxyUser>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstProxyUser> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstProxyUser> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstProxyUser> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstProxyUser> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstProxyUser> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstProxyUser> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstProxyUser> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstProxyUser> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstProxyUser> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstProxyUser> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstProxyUser> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstProxyUser> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstProxyUser> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstProxyUser> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstProxyUser> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstProxyUser> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstProxyUser> e);
          
            #endregion
			
		private static KstProxyUsersBR singlenton =null;
				public static KstProxyUsersBR NewInstance(){
					return  new KstProxyUsersBR();
					
				}
		public static KstProxyUsersBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstProxyUsersBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstProxyUsersBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstProxyUser";

            context = new EFContext();
        }
		 public KstProxyUsersBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstProxyUser";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstProxyUser> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstProxyUsers.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstProxyUser> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstProxyUser> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstProxyUser GetByKey(Guid guidUser)
        {
            return GetByKey(guidUser, true);
        }
        public KstProxyUser GetByKey(Guid guidUser, bool loadIncludes)
        {
            KstProxyUser item = null;
			var query = PredicateBuilder.True<KstProxyUser>();
                    
			string strWhere = @"GuidUser = Guid(""" + guidUser.ToString()+@""")";
            Expression<Func<KstProxyUser, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyUser, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstProxyUser> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstProxyUser> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstProxyUser GetByKey(Guid guidUser, params Expression<Func<KstProxyUser, object>>[] includes)
        {
            KstProxyUser item = null;
			string strWhere = @"GuidUser = Guid(""" + guidUser.ToString()+@""")";
          Expression<Func<KstProxyUser, bool>> predicate = p=> p.GuidUser == guidUser;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstProxyUser, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstProxyUser GetByKey(Guid guidUser, string includes)
        {
            KstProxyUser item = null;
			string strWhere = @"GuidUser = Guid(""" + guidUser.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstProxyUser GetByKey(Guid guidUser, string usemode, string includes)
		{
			return GetByKey(guidUser, usemode, null, includes);

		 }
		 public KstProxyUser GetByKey(Guid guidUser, string usemode, ContextRequest context,  string includes)
        {
            KstProxyUser item = null;
			string strWhere = @"GuidUser = Guid(""" + guidUser.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstProxyUser, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstProxyUser>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate, params Expression<Func<KstProxyUser, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "KstProxyRole";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstProxyUser>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					Expression<Func<KstProxyUser,bool>> multitenantExpression = null;
 
                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstProxyUser> result = null;
               BusinessRulesEventArgs<KstProxyUser>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstProxyUser>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstProxyUser>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstProxyUser>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstProxyUser>();
 				string fkIncludes = "KstProxyRole";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;

                IQueryable<KstProxyUser> query =  con.KstProxyUsers.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstProxyUser>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstProxyUser>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstProxyUser>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstProxyUser> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "KstProxyRole";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyUser>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstProxyUser> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstProxyUser> result = new List<KstProxyUser>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstProxyUser>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstProxyUser>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstProxyUser>();
 				string fkIncludes = "KstProxyRole";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                //var es = _repository.Queryable;
				IQueryable<KstProxyUser> query = con.KstProxyUsers.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


				//string predicateString = predicate.ToDynamicLinq<KstProxyUser>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstProxyUser,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstProxyUser>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstProxyUser GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 

                return GetSummaryOperation(con, new KstProxyUser(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.DisplayName);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.Username);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.Password);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.FirstName);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.LastName);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.Email);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.GuidRole);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.Disabled);
					contextRequest.CustomQuery.SpecificProperties.Add(KstProxyUser.PropertyNames.KstProxyRole);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidUser")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidUser");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstProxyUsers", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					case "KstProxyRole":
					if (includesList.Contains(selected)){
                        linq = "it.KstProxyRole as KstProxyRole";
					}
                    else
						linq = "iif(it.KstProxyRole != null, KstProxyRole(it.KstProxyRole.GuidRole, it.KstProxyRole.RoleName), null) as KstProxyRole";
 					break;
					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstProxyUser> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstProxyUser>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstProxyUser> result = new List<KstProxyUser>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstProjectUsers,KstUserFiles");

        }

        public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstProxyUser> GetBy(Expression<Func<KstProxyUser, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"DisplayName.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"Username.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"Password.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"FirstName.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"LastName.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"Email.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"it.KstProxyRole.RoleName.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstProxyUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstProxyUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstProxyUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstProxyUser> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstProxyUser> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstProxyUser> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstProxyUser Create(KstProxyUser entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstProxyUser Create(KstProxyUser entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstProxyUser itemForSave = new KstProxyUser();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	
	


			}
#endregion
               BusinessRulesEventArgs<KstProxyUser> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidUser == Guid.Empty)
                   {
                       entity.GuidUser = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidUser = entity.GuidUser;
				  
		
			itemForSave.GuidUser = entity.GuidUser;

			itemForSave.DisplayName = entity.DisplayName;

			itemForSave.Username = entity.Username;

			itemForSave.Password = entity.Password;

			itemForSave.FirstName = entity.FirstName;

			itemForSave.LastName = entity.LastName;

			itemForSave.Email = entity.Email;

			itemForSave.GuidRole = entity.GuidRole;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.Disabled = entity.Disabled;

				
				con.KstProxyUsers.Add(itemForSave);





					//if (entity.KstProxyRole != null)
					//{
					//	var kstProxyRole = new KstProxyRole();
					//	kstProxyRole.GuidRole = entity.KstProxyRole.GuidRole;
					//	itemForSave.KstProxyRole = kstProxyRole;
					//	SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyRole>(con, itemForSave.KstProxyRole);
			
					//}





                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstProxyUser>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstProxyUser", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstProxyUser> e = null;
        public void Create(List<KstProxyUser> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstProxyUser> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstProxyUser entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstProxyUser> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstProxyUser> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidUser == Guid.Empty)
                   {
                       entity.GuidUser = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	
	


			}
#endregion


		
			//entity.GuidUser = entity.GuidUser;

			//entity.DisplayName = entity.DisplayName;

			//entity.Username = entity.Username;

			//entity.Password = entity.Password;

			//entity.FirstName = entity.FirstName;

			//entity.LastName = entity.LastName;

			//entity.Email = entity.Email;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.Disabled = entity.Disabled;

				
				





				    if (entity.KstProxyRole != null)
					{
						//var kstProxyRole = new KstProxyRole();
						entity.GuidRole = entity.KstProxyRole.GuidRole;
						//entity.KstProxyRole = kstProxyRole;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyRole>(con, itemForSave.KstProxyRole);
			
					}





                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstProxyUser> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstProxyUser item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstProxyUser item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstProxyUser> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstProxyUser>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProxyUsers", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   



                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstProxyUser>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstProxyUser>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstProxyUser> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstProxyUser() { GuidUser = entity.GuidUser };

                    con.Entry<KstProxyUser>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstProxyUser> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	



			}
#endregion






				    if (entity.KstProxyRole != null)
					{
						//var kstProxyRole = new KstProxyRole();
						entity.GuidRole = entity.KstProxyRole.GuidRole;
						//entity.KstProxyRole = kstProxyRole;
						//SFS.Core.BR.Utils.TryAttachFKRelation<KstProxyRole>(con, itemForSave.KstProxyRole);
			
					}





				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstProxyUser Update(KstProxyUser entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstProxyUser Update(KstProxyUser entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstProxyUser  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();

//	    var oldentity = GetBy(p => p.GuidUser == entity.GuidUser, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
			
	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstProxyUser> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstProxyUsersBR br = new KstProxyUsersBR(true );
               // var oldentity = br.GetBy("GuidUser = Guid(\"" + entity.GuidUser + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstProxyUsers.FirstOrDefault(p=> p.GuidUser == entity.GuidUser);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstProxyUsers", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstProxyUser.PropertyNames.UpdatedDate);

           
					


					
					

				
		  
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstProxyUser Save(KstProxyUser entity)
        {
			return Create(entity);
        }
        public int Save(List<KstProxyUser> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstProxyUser entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstProxyUser entity, ContextRequest contextRequest)
        {
				
				  List<KstProxyUser> entities = new List<KstProxyUser>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstProxyUsersBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstProxyUser entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstProxyUser> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstProxyUser> _e = null;
               List<KstProxyUser> _items = new List<KstProxyUser>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedDate");

						
					}
					else {
					con.Entry<KstProxyUser>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstProxyUsersBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedDate");
        }

         public void Delete(List<KstProxyUser> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstProxyUser> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstProxyUser> eToChilds = new BusinessRulesEventArgs<KstProxyUser>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstProxyUser item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstProxyUser>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstProxyUser, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstProxyUser, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstProxyUser>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
				
				IQueryable<KstProxyUser> query = con.KstProxyUsers.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "KstProxyRole";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstProxyUser>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstProxyUser>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstProxyUser> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstProxyUser>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstProxyUsers.Where(predicate).Count();
					
                }else
                    return con.KstProxyUsers.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class KstActivityTypesBR:BRBase<KstActivityType>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<KstActivityType> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<KstActivityType> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<KstActivityType> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<KstActivityType> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<KstActivityType> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<KstActivityType> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<KstActivityType> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<KstActivityType> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<KstActivityType> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<KstActivityType> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<KstActivityType> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<KstActivityType> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<KstActivityType> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<KstActivityType> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<KstActivityType> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<KstActivityType> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<KstActivityType> e);
          
            #endregion
			
		private static KstActivityTypesBR singlenton =null;
				public static KstActivityTypesBR NewInstance(){
					return  new KstActivityTypesBR();
					
				}
		public static KstActivityTypesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new KstActivityTypesBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public KstActivityTypesBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "KstActivityType";

            context = new EFContext();
        }
		 public KstActivityTypesBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "KstActivityType";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<KstActivityType> Get()
        {
            using (EFContext con = new EFContext())
            {
				
				var query = con.KstActivityTypes.AsQueryable();
                //con.Configuration.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            }

        }
		



 	
		public List<KstActivityType> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<KstActivityType> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public KstActivityType GetByKey(Guid guidActivityType)
        {
            return GetByKey(guidActivityType, true);
        }
        public KstActivityType GetByKey(Guid guidActivityType, bool loadIncludes)
        {
            KstActivityType item = null;
			var query = PredicateBuilder.True<KstActivityType>();
                    
			string strWhere = @"GuidActivityType = Guid(""" + guidActivityType.ToString()+@""")";
            Expression<Func<KstActivityType, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstActivityType, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<KstActivityType> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<KstActivityType> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public KstActivityType GetByKey(Guid guidActivityType, params Expression<Func<KstActivityType, object>>[] includes)
        {
            KstActivityType item = null;
			string strWhere = @"GuidActivityType = Guid(""" + guidActivityType.ToString()+@""")";
          Expression<Func<KstActivityType, bool>> predicate = p=> p.GuidActivityType == guidActivityType;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<KstActivityType, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public KstActivityType GetByKey(Guid guidActivityType, string includes)
        {
            KstActivityType item = null;
			string strWhere = @"GuidActivityType = Guid(""" + guidActivityType.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public KstActivityType GetByKey(Guid guidActivityType, string usemode, string includes)
		{
			return GetByKey(guidActivityType, usemode, null, includes);

		 }
		 public KstActivityType GetByKey(Guid guidActivityType, string usemode, ContextRequest context,  string includes)
        {
            KstActivityType item = null;
			string strWhere = @"GuidActivityType = Guid(""" + guidActivityType.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate, ContextRequest contextRequest, params Expression<Func<KstActivityType, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<KstActivityType>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate, params Expression<Func<KstActivityType, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<KstActivityType>();
                var notDeletedExpression = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;
					Expression<Func<KstActivityType,bool>> multitenantExpression  = null;
					if (contextRequest != null && contextRequest.Company != null){	
                        	
						multitenantExpression = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<KstActivityType> result = null;
               BusinessRulesEventArgs<KstActivityType>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<KstActivityType>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<KstActivityType>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<KstActivityType>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<KstActivityType>();
                
                //var es = _repository.Queryable;

                IQueryable<KstActivityType> query =  con.KstActivityTypes.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null){
		                        	
										predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
 									
									}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<KstActivityType>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<KstActivityType>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<KstActivityType>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<KstActivityType> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstActivityType>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null){   
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					}
					 									
					string multiTenantField = "GuidCompany";

                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<KstActivityType> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<KstActivityType> result = new List<KstActivityType>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<KstActivityType>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<KstActivityType>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<KstActivityType>();
                
                //var es = _repository.Queryable;
				IQueryable<KstActivityType> query = con.KstActivityTypes.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa

									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");

								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<KstActivityType>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<KstActivityType,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<KstActivityType>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public KstActivityType GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
					if (contextRequest != null && contextRequest.Company != null)
					{
						multitenantExpression = @"(GuidCompany = @GuidCompanyMultiTenant)";
						contextRequest.CustomQuery.SetParam("GuidCompanyMultiTenant", new Nullable<Guid>(contextRequest.Company.GuidCompany));
					}
					 									
					string multiTenantField = "GuidCompany";


                return GetSummaryOperation(con, new KstActivityType(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.Name);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.GuidCompany);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.CreatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.UpdatedBy);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.IsDeleted);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.BizKeyEngine);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.CreatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.UpdatedDate);
					contextRequest.CustomQuery.SpecificProperties.Add(KstActivityType.PropertyNames.Bytes);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidActivityType")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidActivityType");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("KstActivityTypes", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<KstActivityType> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<KstActivityType>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<KstActivityType> result = new List<KstActivityType>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "KstActivities,KstWorkTimes");

        }

        public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<KstActivityType> GetBy(Expression<Func<KstActivityType, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"BizKeyEngine.Contains(""{0}"")", word));
					

					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<KstActivityType> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<KstActivityType> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<KstActivityType> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<KstActivityType> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<KstActivityType> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<KstActivityType> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public KstActivityType Create(KstActivityType entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public KstActivityType Create(KstActivityType entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				KstActivityType itemForSave = new KstActivityType();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
		
					if (contextRequest?.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion
               BusinessRulesEventArgs<KstActivityType> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidActivityType == Guid.Empty)
                   {
                       entity.GuidActivityType = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidActivityType = entity.GuidActivityType;
				  
		
			itemForSave.GuidActivityType = entity.GuidActivityType;

			itemForSave.Name = entity.Name;

			itemForSave.GuidCompany = entity.GuidCompany;

			itemForSave.CreatedBy = entity.CreatedBy;

			itemForSave.UpdatedBy = entity.UpdatedBy;

			itemForSave.IsDeleted = entity.IsDeleted;

			itemForSave.BizKeyEngine = entity.BizKeyEngine;

			itemForSave.CreatedDate = entity.CreatedDate;

			itemForSave.UpdatedDate = entity.UpdatedDate;

			itemForSave.Bytes = entity.Bytes;

				
				con.KstActivityTypes.Add(itemForSave);






                
				//con.ChangeTracker.Entries().Where(p => p.Entity != itemForSave && p.State != EntityState.Unchanged).ForEach(p => p.State = EntityState.Detached);

				//con.Entry<KstActivityType>(itemForSave).State = EntityState.Added;

				//con.SaveChanges();
			

				 this.Create(itemForSave, con, "KstActivityType", "KSTime", contextRequest); 
			
					 
				

				//itemResult = entity;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<KstActivityType> e = null;
        public void Create(List<KstActivityType> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<KstActivityType> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (KstActivityType entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<KstActivityType> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<KstActivityType> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidActivityType == Guid.Empty)
                   {
                       entity.GuidActivityType = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {
				if (entity.CreatedDate == null )
			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	


			}
#endregion


		
			//entity.GuidActivityType = entity.GuidActivityType;

			//entity.Name = entity.Name;

			//entity.GuidCompany = entity.GuidCompany;

			//entity.CreatedBy = entity.CreatedBy;

			//entity.UpdatedBy = entity.UpdatedBy;

			//entity.IsDeleted = entity.IsDeleted;

			//entity.BizKeyEngine = entity.BizKeyEngine;

			//entity.CreatedDate = entity.CreatedDate;

			//entity.UpdatedDate = entity.UpdatedDate;

			//entity.Bytes = entity.Bytes;

				
				






                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<KstActivityType> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(KstActivityType item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(KstActivityType item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<KstActivityType> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<KstActivityType>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstActivityTypes", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   

			if(contextRequest.User != null){
					item.UpdatedBy = contextRequest.User.GuidUser;
				  if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                        if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedBy"))
                            contextNew.CustomQuery.SpecificProperties.Add("UpdatedBy");
	
			}


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<KstActivityType>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<KstActivityType>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<KstActivityType> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new KstActivityType() { GuidActivityType = entity.GuidActivityType };

                    con.Entry<KstActivityType>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<KstActivityType> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	



			}
#endregion







				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public KstActivityType Update(KstActivityType entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public KstActivityType Update(KstActivityType entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				KstActivityType  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//if(contextRequest.User != null)
				//entity.UpdatedBy = contextRequest.User.GuidUser;

//	    var oldentity = GetBy(p => p.GuidActivityType == entity.GuidActivityType, contextRequest).FirstOrDefault();
	//	if (oldentity != null) {
		
          //  entity.CreatedDate = oldentity.CreatedDate;
    //        entity.CreatedBy = oldentity.CreatedBy;
	
      //      entity.GuidCompany = oldentity.GuidCompany;
	
			

	
		//}

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<KstActivityType> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}

				var contextForGet = contextRequest.CopySafe();
                contextForGet.CustomQuery.IncludeDeleted = true;
                contextForGet.CustomQuery.IncludeAllCompanies = true;
				contextForGet.PreventInterceptors = true ;
                KstActivityTypesBR br = new KstActivityTypesBR(true );
               // var oldentity = br.GetBy("GuidActivityType = Guid(\"" + entity.GuidActivityType + "\")", contextForGet).FirstOrDefault();
				var oldentity = con.KstActivityTypes.FirstOrDefault(p=> p.GuidActivityType == entity.GuidActivityType);
               

			     con.Entry(oldentity).CurrentValues.SetValues(entity);

				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("KstActivityTypes", UIActions.Updating)))
			oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//oldentity.UpdatedDate = DateTime.Now.ToUniversalTime();
			//properties.Add(KstActivityType.PropertyNames.UpdatedDate);
			if(contextRequest.User != null){
					oldentity.UpdatedBy = contextRequest.User.GuidUser;
				//	properties.Add(KstActivityType.PropertyNames.UpdatedBy);
				}

           
					
					

				
		  
                con.Entry(oldentity).Property(x => x.GuidCompany).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedDate).IsModified = false;
                con.Entry(oldentity).Property(x => x.CreatedBy).IsModified = false;
				 
                
				con.Entry(oldentity).Property(x => x.IsDeleted).IsModified = false;
				con.Entry(oldentity).Property(x => x.Bytes).IsModified = false;
               

               
               


                con.SaveChanges();

              //  UpdateAgile(oldentity, con, contextRequest, properties);
                
            
				//UpdateAgile(oldentity, contextRequest
        
					 
					
               
				itemResult = entity;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public KstActivityType Save(KstActivityType entity)
        {
			return Create(entity);
        }
        public int Save(List<KstActivityType> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(KstActivityType entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(KstActivityType entity, ContextRequest contextRequest)
        {
				
				  List<KstActivityType> entities = new List<KstActivityType>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new KstActivityTypesBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(KstActivityType entity,  ContextRequest contextRequest, BusinessRulesEventArgs<KstActivityType> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<KstActivityType> _e = null;
               List<KstActivityType> _items = new List<KstActivityType>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
									//IsDeleted
					bool logicDelete = true;
					if (entity.IsDeleted != null)
					{
						if (entity.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											//entity = GetBy(p =>, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						if (contextRequest != null && contextRequest.User != null)
							entity.UpdatedBy = contextRequest.User.GuidUser;
                        entity.UpdatedDate = DateTime.UtcNow;
						contextRequest.PreventInterceptors = true;
						UpdateAgile(entity, contextRequest, "IsDeleted","UpdatedBy","UpdatedDate");

						
					}
					else {
					con.Entry<KstActivityType>(entity).State = EntityState.Deleted;
					con.SaveChanges();
				
				 
					}
								
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
 public void UnDelete(string query, Guid[] guids, ContextRequest contextRequest)
        {
            var br = new KstActivityTypesBR(true);
            contextRequest.CustomQuery.IncludeDeleted = true;
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);

            foreach (var item in items)
            {
                item.IsDeleted = false;
						if (contextRequest != null && contextRequest.User != null)
							item.UpdatedBy = contextRequest.User.GuidUser;
                        item.UpdatedDate = DateTime.UtcNow;
            }

            UpdateBulk(items, "IsDeleted","UpdatedBy","UpdatedDate");
        }

         public void Delete(List<KstActivityType> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<KstActivityType> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<KstActivityType> eToChilds = new BusinessRulesEventArgs<KstActivityType>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (KstActivityType item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<KstActivityType>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<KstActivityType, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<KstActivityType, bool>> predicate, ContextRequest contextRequest)
        {


		
		 using (EFContext con = new EFContext())
            {


				if (predicate == null) predicate = PredicateBuilder.True<KstActivityType>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        	
									predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						//			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa

								}
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				IQueryable<KstActivityType> query = con.KstActivityTypes.AsQueryable();
                return query.AsExpandable().Count(predicate);

			
				}
			

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<KstActivityType>();
                var notDeletedExpression = "(IsDeleted != true OR IsDeleted = null)";
				string isDeletedField = "IsDeleted";
	
					bool sharedAndMultiTenant = false;	  
					string multitenantExpression = null;
				if (contextRequest != null && contextRequest.Company != null)
                   	
						 multitenantExpression = @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))";
					 									
					string multiTenantField = "GuidCompany";

                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<KstActivityType>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<KstActivityType> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<KstActivityType>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null && contextRequest.CustomQuery.IncludeAllCompanies == false){
                        		
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.KstActivityTypes.Where(predicate).Count();
					
                }else
                    return con.KstActivityTypes.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class unProxyBusinessObjectsBR:BRBase<unProxyBusinessObject>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<unProxyBusinessObject> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<unProxyBusinessObject> e);
          
            #endregion
			
		private static unProxyBusinessObjectsBR singlenton =null;
				public static unProxyBusinessObjectsBR NewInstance(){
					return  new unProxyBusinessObjectsBR();
					
				}
		public static unProxyBusinessObjectsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new unProxyBusinessObjectsBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public unProxyBusinessObjectsBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "unProxyBusinessObject";

            context = new EFContext();
        }
		 public unProxyBusinessObjectsBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "unProxyBusinessObject";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get
		



 	
		public List<unProxyBusinessObject> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<unProxyBusinessObject> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public unProxyBusinessObject GetByKey(Guid guidBusinessObject)
        {
            return GetByKey(guidBusinessObject, true);
        }
        public unProxyBusinessObject GetByKey(Guid guidBusinessObject, bool loadIncludes)
        {
            unProxyBusinessObject item = null;
			var query = PredicateBuilder.True<unProxyBusinessObject>();
                    
			string strWhere = @"GuidBusinessObject = Guid(""" + guidBusinessObject.ToString()+@""")";
            Expression<Func<unProxyBusinessObject, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<unProxyBusinessObject, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<unProxyBusinessObject> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<unProxyBusinessObject> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public unProxyBusinessObject GetByKey(Guid guidBusinessObject, params Expression<Func<unProxyBusinessObject, object>>[] includes)
        {
            unProxyBusinessObject item = null;
			string strWhere = @"GuidBusinessObject = Guid(""" + guidBusinessObject.ToString()+@""")";
          Expression<Func<unProxyBusinessObject, bool>> predicate = p=> p.GuidBusinessObject == guidBusinessObject;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<unProxyBusinessObject, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public unProxyBusinessObject GetByKey(Guid guidBusinessObject, string includes)
        {
            unProxyBusinessObject item = null;
			string strWhere = @"GuidBusinessObject = Guid(""" + guidBusinessObject.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public unProxyBusinessObject GetByKey(Guid guidBusinessObject, string usemode, string includes)
		{
			return GetByKey(guidBusinessObject, usemode, null, includes);

		 }
		 public unProxyBusinessObject GetByKey(Guid guidBusinessObject, string usemode, ContextRequest context,  string includes)
        {
            unProxyBusinessObject item = null;
			string strWhere = @"GuidBusinessObject = Guid(""" + guidBusinessObject.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate, ContextRequest contextRequest, params Expression<Func<unProxyBusinessObject, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<unProxyBusinessObject>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate, params Expression<Func<unProxyBusinessObject, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<unProxyBusinessObject>();
				string isDeletedField = null;
				Expression<Func<unProxyBusinessObject,bool>> notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					Expression<Func<unProxyBusinessObject,bool>> multitenantExpression = null;
 
                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<unProxyBusinessObject> result = null;
               BusinessRulesEventArgs<unProxyBusinessObject>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<unProxyBusinessObject>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<unProxyBusinessObject>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<unProxyBusinessObject>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<unProxyBusinessObject>();
                
                //var es = _repository.Queryable;

                IQueryable<unProxyBusinessObject> query =  con.unProxyBusinessObjects.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<unProxyBusinessObject>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<unProxyBusinessObject>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<unProxyBusinessObject>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<unProxyBusinessObject> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<unProxyBusinessObject>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<unProxyBusinessObject> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<unProxyBusinessObject> result = new List<unProxyBusinessObject>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<unProxyBusinessObject>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<unProxyBusinessObject>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<unProxyBusinessObject>();
                
                //var es = _repository.Queryable;
				IQueryable<unProxyBusinessObject> query = con.unProxyBusinessObjects.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
				//string predicateString = predicate.ToDynamicLinq<unProxyBusinessObject>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<unProxyBusinessObject,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<unProxyBusinessObject>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public unProxyBusinessObject GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 

                return GetSummaryOperation(con, new unProxyBusinessObject(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(unProxyBusinessObject.PropertyNames.Name);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxyBusinessObject.PropertyNames.BusinessObjectKey);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxyBusinessObject.PropertyNames.EntitySetName);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidBusinessObject")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidBusinessObject");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("unProxyBusinessObjects", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<unProxyBusinessObject> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<unProxyBusinessObject>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<unProxyBusinessObject> result = new List<unProxyBusinessObject>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<unProxyBusinessObject> GetBy(Expression<Func<unProxyBusinessObject, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"BusinessObjectKey.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"EntitySetName.Contains(""{0}"")", word));
					

					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<unProxyBusinessObject> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<unProxyBusinessObject> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<unProxyBusinessObject> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "Name";
            }
			//orderDir = "";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<unProxyBusinessObject> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<unProxyBusinessObject> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<unProxyBusinessObject> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public unProxyBusinessObject Create(unProxyBusinessObject entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public unProxyBusinessObject Create(unProxyBusinessObject entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				unProxyBusinessObject itemForSave = new unProxyBusinessObject();
#region Autos
		if(!preventSecurityRestrictions){

	
	


			}
#endregion
               BusinessRulesEventArgs<unProxyBusinessObject> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidBusinessObject == Guid.Empty)
                   {
                       entity.GuidBusinessObject = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidBusinessObject = entity.GuidBusinessObject;
				  
				//if (itemResult == null)
				//	itemResult = new unProxyBusinessObject();
					context = null;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<unProxyBusinessObject> e = null;
        public void Create(List<unProxyBusinessObject> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<unProxyBusinessObject> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (unProxyBusinessObject entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<unProxyBusinessObject> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<unProxyBusinessObject> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidBusinessObject == Guid.Empty)
                   {
                       entity.GuidBusinessObject = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {


}
	
	


			}
#endregion


		
			//entity.GuidBusinessObject = entity.GuidBusinessObject;

			//entity.Name = entity.Name;

			//entity.BusinessObjectKey = entity.BusinessObjectKey;

			//entity.EntitySetName = entity.EntitySetName;

				
				


                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<unProxyBusinessObject> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(unProxyBusinessObject item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(unProxyBusinessObject item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<unProxyBusinessObject> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<unProxyBusinessObject>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<unProxyBusinessObject>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<unProxyBusinessObject>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<unProxyBusinessObject> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new unProxyBusinessObject() { GuidBusinessObject = entity.GuidBusinessObject };

                    con.Entry<unProxyBusinessObject>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<unProxyBusinessObject> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

	



			}
#endregion



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public unProxyBusinessObject Update(unProxyBusinessObject entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public unProxyBusinessObject Update(unProxyBusinessObject entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				unProxyBusinessObject  itemResult = null;

	

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<unProxyBusinessObject> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}
				if (itemResult == null)
					itemResult = new unProxyBusinessObject();
					//outcontext= null;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public unProxyBusinessObject Save(unProxyBusinessObject entity)
        {
			return Create(entity);
        }
        public int Save(List<unProxyBusinessObject> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(unProxyBusinessObject entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(unProxyBusinessObject entity, ContextRequest contextRequest)
        {
				
				  List<unProxyBusinessObject> entities = new List<unProxyBusinessObject>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new unProxyBusinessObjectsBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(unProxyBusinessObject entity,  ContextRequest contextRequest, BusinessRulesEventArgs<unProxyBusinessObject> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<unProxyBusinessObject> _e = null;
               List<unProxyBusinessObject> _items = new List<unProxyBusinessObject>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
								
				con.Entry<unProxyBusinessObject>(entity).State = EntityState.Deleted;
				con.SaveChanges();
				 
                				
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
        public void Delete(List<unProxyBusinessObject> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<unProxyBusinessObject> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<unProxyBusinessObject> eToChilds = new BusinessRulesEventArgs<unProxyBusinessObject>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (unProxyBusinessObject item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<unProxyBusinessObject, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<unProxyBusinessObject, bool>> predicate, ContextRequest contextRequest)
        {


			
            BusinessRulesEventArgs<unProxyBusinessObject> e = null;
            OnCounting(this, e = new BusinessRulesEventArgs<unProxyBusinessObject>() { ContextRequest = contextRequest, FilterExpression = predicate });
            if (e != null)
            {
                if (e.Cancel)
                {
                    return e.CountResult;
                }
            }
            return 0;

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<unProxyBusinessObject>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<unProxyBusinessObject>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<unProxyBusinessObject> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<unProxyBusinessObject>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.unProxyBusinessObjects.Where(predicate).Count();
					
                }else
                    return con.unProxyBusinessObjects.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class unProxyEventsBR:BRBase<unProxyEvent>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<unProxyEvent> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<unProxyEvent> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<unProxyEvent> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<unProxyEvent> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<unProxyEvent> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<unProxyEvent> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<unProxyEvent> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<unProxyEvent> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<unProxyEvent> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<unProxyEvent> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<unProxyEvent> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<unProxyEvent> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<unProxyEvent> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<unProxyEvent> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<unProxyEvent> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<unProxyEvent> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<unProxyEvent> e);
          
            #endregion
			
		private static unProxyEventsBR singlenton =null;
				public static unProxyEventsBR NewInstance(){
					return  new unProxyEventsBR();
					
				}
		public static unProxyEventsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new unProxyEventsBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public unProxyEventsBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "unProxyEvent";

            context = new EFContext();
        }
		 public unProxyEventsBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "unProxyEvent";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get
		



 	
		public List<unProxyEvent> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<unProxyEvent> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public unProxyEvent GetByKey(Guid guidUnProxyEvent)
        {
            return GetByKey(guidUnProxyEvent, true);
        }
        public unProxyEvent GetByKey(Guid guidUnProxyEvent, bool loadIncludes)
        {
            unProxyEvent item = null;
			var query = PredicateBuilder.True<unProxyEvent>();
                    
			string strWhere = @"GuidUnProxyEvent = Guid(""" + guidUnProxyEvent.ToString()+@""")";
            Expression<Func<unProxyEvent, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<unProxyEvent, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<unProxyEvent> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<unProxyEvent> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public unProxyEvent GetByKey(Guid guidUnProxyEvent, params Expression<Func<unProxyEvent, object>>[] includes)
        {
            unProxyEvent item = null;
			string strWhere = @"GuidUnProxyEvent = Guid(""" + guidUnProxyEvent.ToString()+@""")";
          Expression<Func<unProxyEvent, bool>> predicate = p=> p.GuidUnProxyEvent == guidUnProxyEvent;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<unProxyEvent, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public unProxyEvent GetByKey(Guid guidUnProxyEvent, string includes)
        {
            unProxyEvent item = null;
			string strWhere = @"GuidUnProxyEvent = Guid(""" + guidUnProxyEvent.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public unProxyEvent GetByKey(Guid guidUnProxyEvent, string usemode, string includes)
		{
			return GetByKey(guidUnProxyEvent, usemode, null, includes);

		 }
		 public unProxyEvent GetByKey(Guid guidUnProxyEvent, string usemode, ContextRequest context,  string includes)
        {
            unProxyEvent item = null;
			string strWhere = @"GuidUnProxyEvent = Guid(""" + guidUnProxyEvent.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate, ContextRequest contextRequest, params Expression<Func<unProxyEvent, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<unProxyEvent>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate, params Expression<Func<unProxyEvent, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<unProxyEvent>();
				string isDeletedField = null;
				Expression<Func<unProxyEvent,bool>> notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					Expression<Func<unProxyEvent,bool>> multitenantExpression = null;
 
                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<unProxyEvent> result = null;
               BusinessRulesEventArgs<unProxyEvent>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<unProxyEvent>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<unProxyEvent>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<unProxyEvent>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<unProxyEvent>();
                
                //var es = _repository.Queryable;

                IQueryable<unProxyEvent> query =  con.unProxyEvents.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<unProxyEvent>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<unProxyEvent>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<unProxyEvent>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<unProxyEvent> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<unProxyEvent>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<unProxyEvent> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<unProxyEvent> result = new List<unProxyEvent>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<unProxyEvent>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<unProxyEvent>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<unProxyEvent>();
                
                //var es = _repository.Queryable;
				IQueryable<unProxyEvent> query = con.unProxyEvents.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
				//string predicateString = predicate.ToDynamicLinq<unProxyEvent>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<unProxyEvent,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<unProxyEvent>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public unProxyEvent GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 

                return GetSummaryOperation(con, new unProxyEvent(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(unProxyEvent.PropertyNames.Title);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxyEvent.PropertyNames.Message);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxyEvent.PropertyNames.TypeEvent);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxyEvent.PropertyNames.IsException);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxyEvent.PropertyNames.UpdatedDate);
  

                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidUnProxyEvent")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidUnProxyEvent");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("unProxyEvents", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<unProxyEvent> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<unProxyEvent>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<unProxyEvent> result = new List<unProxyEvent>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<unProxyEvent> GetBy(Expression<Func<unProxyEvent, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"Message.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"TypeEvent.Contains(""{0}"")", word));
					

					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<unProxyEvent> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<unProxyEvent> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<unProxyEvent> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<unProxyEvent> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<unProxyEvent> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<unProxyEvent> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public unProxyEvent Create(unProxyEvent entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public unProxyEvent Create(unProxyEvent entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				unProxyEvent itemForSave = new unProxyEvent();
#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	
	


			}
#endregion
               BusinessRulesEventArgs<unProxyEvent> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidUnProxyEvent == Guid.Empty)
                   {
                       entity.GuidUnProxyEvent = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidUnProxyEvent = entity.GuidUnProxyEvent;
				  
				//if (itemResult == null)
				//	itemResult = new unProxyEvent();
					context = null;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<unProxyEvent> e = null;
        public void Create(List<unProxyEvent> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<unProxyEvent> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (unProxyEvent entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<unProxyEvent> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<unProxyEvent> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidUnProxyEvent == Guid.Empty)
                   {
                       entity.GuidUnProxyEvent = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {


}
				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	
	


			}
#endregion


		
			//entity.GuidUnProxyEvent = entity.GuidUnProxyEvent;

			//entity.Title = entity.Title;

			//entity.Message = entity.Message;

			//entity.TypeEvent = entity.TypeEvent;

			//entity.IsException = entity.IsException;

			//entity.UpdatedDate = entity.UpdatedDate;

				
				


                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<unProxyEvent> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(unProxyEvent item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(unProxyEvent item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<unProxyEvent> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<unProxyEvent>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {
				//if (entity.UpdatedDate == null || (contextRequest != null && contextRequest.IsFromUI("unProxyEvents", UIActions.Updating)))
			item.UpdatedDate = DateTime.Now.ToUniversalTime();
			 
                if (contextNew.CustomQuery.SpecificProperties.Count() > 0)
                    if (!contextNew.CustomQuery.SpecificProperties.Contains("UpdatedDate"))
                        contextNew.CustomQuery.SpecificProperties.Add("UpdatedDate");

           
              
				
                   



                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<unProxyEvent>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<unProxyEvent>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<unProxyEvent> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new unProxyEvent() { GuidUnProxyEvent = entity.GuidUnProxyEvent };

                    con.Entry<unProxyEvent>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<unProxyEvent> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

				if (entity.UpdatedDate == null )
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
	



			}
#endregion



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public unProxyEvent Update(unProxyEvent entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public unProxyEvent Update(unProxyEvent entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				unProxyEvent  itemResult = null;

	
			//entity.UpdatedDate = DateTime.Now.ToUniversalTime();

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<unProxyEvent> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}
				if (itemResult == null)
					itemResult = new unProxyEvent();
					//outcontext= null;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public unProxyEvent Save(unProxyEvent entity)
        {
			return Create(entity);
        }
        public int Save(List<unProxyEvent> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(unProxyEvent entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(unProxyEvent entity, ContextRequest contextRequest)
        {
				
				  List<unProxyEvent> entities = new List<unProxyEvent>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new unProxyEventsBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(unProxyEvent entity,  ContextRequest contextRequest, BusinessRulesEventArgs<unProxyEvent> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<unProxyEvent> _e = null;
               List<unProxyEvent> _items = new List<unProxyEvent>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
								
				con.Entry<unProxyEvent>(entity).State = EntityState.Deleted;
				con.SaveChanges();
				 
                				
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
        public void Delete(List<unProxyEvent> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<unProxyEvent> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<unProxyEvent> eToChilds = new BusinessRulesEventArgs<unProxyEvent>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (unProxyEvent item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<unProxyEvent, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<unProxyEvent, bool>> predicate, ContextRequest contextRequest)
        {


			
            BusinessRulesEventArgs<unProxyEvent> e = null;
            OnCounting(this, e = new BusinessRulesEventArgs<unProxyEvent>() { ContextRequest = contextRequest, FilterExpression = predicate });
            if (e != null)
            {
                if (e.Cancel)
                {
                    return e.CountResult;
                }
            }
            return 0;

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<unProxyEvent>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<unProxyEvent>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<unProxyEvent> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<unProxyEvent>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.unProxyEvents.Where(predicate).Count();
					
                }else
                    return con.unProxyEvents.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
		public partial class unProxySettingsBR:BRBase<unProxySetting>{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<unProxySetting> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<unProxySetting> e);
			partial void OnUpdatedAgile(object sender, BusinessRulesEventArgs<unProxySetting> e);
				partial void OnUpdatingAgile(object sender, BusinessRulesEventArgs<unProxySetting> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<unProxySetting> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<unProxySetting> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<unProxySetting> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<unProxySetting> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<unProxySetting> e);
            protected override void OnVirtualGetting(object sender, BusinessRulesEventArgs<unProxySetting> e)
            {
                OnGetting(sender, e);
            }
			protected override void OnVirtualCounting(object sender, BusinessRulesEventArgs<unProxySetting> e)
            {
                OnCounting(sender, e);
            }
			partial void OnTaken(object sender, BusinessRulesEventArgs<unProxySetting> e);
			protected override void OnVirtualTaken(object sender, BusinessRulesEventArgs<unProxySetting> e)
            {
                OnTaken(sender, e);
            }
			protected override void OnVirtualSummaryOperation(object sender,  BusinessRulesEventArgs<unProxySetting> e)
			{
				OnSummaryOperation(sender, e);
			}
            partial void OnCounting(object sender, BusinessRulesEventArgs<unProxySetting> e);
			partial void OnSummaryOperation(object sender, BusinessRulesEventArgs<unProxySetting> e);
 
			partial void OnQuerySettings(object sender, BusinessRulesEventArgs<unProxySetting> e);
          
            #endregion
			
		private static unProxySettingsBR singlenton =null;
				public static unProxySettingsBR NewInstance(){
					return  new unProxySettingsBR();
					
				}
		public static unProxySettingsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new unProxySettingsBR();
				return singlenton;
			}
		}
		//private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFContext context = null;
        #endregion
        #region Constructor
        public unProxySettingsBR()
        {

			this.AppNameKey = "KSTime";
            this.EntityKey = "unProxySetting";

            context = new EFContext();
        }
		 public unProxySettingsBR(bool preventSecurity)
            {
				this.AppNameKey = "KSTime";
				this.EntityKey = "unProxySetting";

                this.preventSecurityRestrictions = preventSecurity;
				context = new EFContext();
            }
        #endregion
		
		#region Get
		


 private void OnGettingSettings(object sender, BusinessRulesEventArgs<unProxySetting> e)
        {
            Guid? guidCompanySFSPrincipal = Guid.Parse("59A9D643-C110-4247-9490-693CFD223F99");
            string coreModuleKey = "SFSCoreSecurity";

            string appNameKey ="KSTime";
			 unProxySetting model = new unProxySetting();

			secComModSetting settingSMTPServer = null;
            model.SMTPServer = (String)SFS.Core.Configuration.CompanyAppSettings.GetValue("SMTPServer", "SFSCoreSecurity", guidCompanySFSPrincipal.Value,  "String", "", false, out settingSMTPServer);
            model.SMTPServerId = settingSMTPServer.GuidCompModSetting;
		
			secComModSetting settingSMTPSSLEnabled = null;
            model.SMTPSSLEnabled = (Boolean)SFS.Core.Configuration.CompanyAppSettings.GetValue("SMTPSSLEnabled", "SFSCoreSecurity", guidCompanySFSPrincipal.Value,  "Boolean", false, false, out settingSMTPSSLEnabled);
            model.SMTPSSLEnabledId = settingSMTPSSLEnabled.GuidCompModSetting;
		
			secComModSetting settingSMTPUser = null;
            model.SMTPUser = (String)SFS.Core.Configuration.CompanyAppSettings.GetValue("SMTPUser", "SFSCoreSecurity", guidCompanySFSPrincipal.Value,  "String", "", false, out settingSMTPUser);
            model.SMTPUserId = settingSMTPUser.GuidCompModSetting;
		
			secComModSetting settingSMTPPassword = null;
            model.SMTPPassword = (String)SFS.Core.Configuration.CompanyAppSettings.GetValue("SMTPPassword", "SFSCoreSecurity", guidCompanySFSPrincipal.Value,  "String", "", false, out settingSMTPPassword);
            model.SMTPPasswordId = settingSMTPPassword.GuidCompModSetting;
		
			secComModSetting settingSMTPFromName = null;
            model.SMTPFromName = (String)SFS.Core.Configuration.CompanyAppSettings.GetValue("SMTPFromName", "SFSCoreSecurity", guidCompanySFSPrincipal.Value,  "String", "", false, out settingSMTPFromName);
            model.SMTPFromNameId = settingSMTPFromName.GuidCompModSetting;
		
			secComModSetting settingSMTPPort = null;
            model.SMTPPort = (String)SFS.Core.Configuration.CompanyAppSettings.GetValue("SMTPPort", "SFSCoreSecurity", guidCompanySFSPrincipal.Value,  "String", "", false, out settingSMTPPort);
            model.SMTPPortId = settingSMTPPort.GuidCompModSetting;
		
			secComModSetting settingSMTPFromEmail = null;
            model.SMTPFromEmail = (String)SFS.Core.Configuration.CompanyAppSettings.GetValue("SMTPFromEmail", "SFSCoreSecurity", guidCompanySFSPrincipal.Value,  "String", "", false, out settingSMTPFromEmail);
            model.SMTPFromEmailId = settingSMTPFromEmail.GuidCompModSetting;
		
            
           secModuleSetting settingAzureBlobStorageConnection = null;
            model.AzureBlobStorageConnection = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("AzureStorageConnectionString", "SFSCoreSecurity",  "String", "", false, out settingAzureBlobStorageConnection);
            model.AzureBlobStorageConnectionId = settingAzureBlobStorageConnection.GuidModuleSetting;
            
           secModuleSetting settingSaveBlobInAzureStorage = null;
            model.SaveBlobInAzureStorage = (Boolean)SFS.Core.Configuration.ModuleAppSettings.GetValue("save-files-blob", "KSTime",  "Boolean", false, false, out settingSaveBlobInAzureStorage);
            model.SaveBlobInAzureStorageId = settingSaveBlobInAzureStorage.GuidModuleSetting;
            
           secModuleSetting settingSaveBlobInDataBase = null;
            model.SaveBlobInDataBase = (Boolean)SFS.Core.Configuration.ModuleAppSettings.GetValue("save-files-db", "KSTime",  "Boolean", false, false, out settingSaveBlobInDataBase);
            model.SaveBlobInDataBaseId = settingSaveBlobInDataBase.GuidModuleSetting;
            
           secModuleSetting settingUserNameGeoNames = null;
            model.UserNameGeoNames = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("username-geonames", "SFSCoreSecurity",  "String", "", false, out settingUserNameGeoNames);
            model.UserNameGeoNamesId = settingUserNameGeoNames.GuidModuleSetting;
            
           secModuleSetting settingEngineURL = null;
            model.EngineURL = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("EngineURL", "KSTime",  "String", "", false, out settingEngineURL);
            model.EngineURLId = settingEngineURL.GuidModuleSetting;
            
           secModuleSetting settingENGINE_API_KEY = null;
            model.ENGINE_API_KEY = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("ENGINE_API_KEY", "KSTime",  "String", "", false, out settingENGINE_API_KEY);
            model.ENGINE_API_KEYId = settingENGINE_API_KEY.GuidModuleSetting;
            
           secModuleSetting settingMAMBU_URL = null;
            model.MAMBU_URL = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MAMBU_URL", "KSTime",  "String", "", false, out settingMAMBU_URL);
            model.MAMBU_URLId = settingMAMBU_URL.GuidModuleSetting;
            
           secModuleSetting settingMAMBU_USER = null;
            model.MAMBU_USER = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MAMBU_USER", "KSTime",  "String", "", false, out settingMAMBU_USER);
            model.MAMBU_USERId = settingMAMBU_USER.GuidModuleSetting;
            
           secModuleSetting settingMAMBU_PWD = null;
            model.MAMBU_PWD = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MAMBU_PWD", "KSTime",  "String", "", false, out settingMAMBU_PWD);
            model.MAMBU_PWDId = settingMAMBU_PWD.GuidModuleSetting;
            
           secModuleSetting settingKM_MAXIMO = null;
            model.KM_MAXIMO = (Int32)SFS.Core.Configuration.ModuleAppSettings.GetValue("km-maximo", "KSTime",  "Int32", 0, false, out settingKM_MAXIMO);
            model.KM_MAXIMOId = settingKM_MAXIMO.GuidModuleSetting;
            
           secModuleSetting settingMAP_KEY = null;
            model.MAP_KEY = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MAP_KEY", "KSTime",  "String", "", false, out settingMAP_KEY);
            model.MAP_KEYId = settingMAP_KEY.GuidModuleSetting;
            
           secModuleSetting settingENGINE_OAUTH_CLIENT_ID = null;
            model.ENGINE_OAUTH_CLIENT_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("ENGINE_OAUTH_CLIENT_ID", "KSTime",  "String", "", false, out settingENGINE_OAUTH_CLIENT_ID);
            model.ENGINE_OAUTH_CLIENT_IDId = settingENGINE_OAUTH_CLIENT_ID.GuidModuleSetting;
            
           secModuleSetting settingENGINE_OAUTH_LOGIN_URL = null;
            model.ENGINE_OAUTH_LOGIN_URL = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("ENGINE_OAUTH_LOGIN_URL", "KSTime",  "String", "", false, out settingENGINE_OAUTH_LOGIN_URL);
            model.ENGINE_OAUTH_LOGIN_URLId = settingENGINE_OAUTH_LOGIN_URL.GuidModuleSetting;
            
           secModuleSetting settingENGINE_OAUTH_USERNAME = null;
            model.ENGINE_OAUTH_USERNAME = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("ENGINE_OAUTH_USERNAME", "KSTime",  "String", "", false, out settingENGINE_OAUTH_USERNAME);
            model.ENGINE_OAUTH_USERNAMEId = settingENGINE_OAUTH_USERNAME.GuidModuleSetting;
            
           secModuleSetting settingENGINE_OAUTH_PASSWORD = null;
            model.ENGINE_OAUTH_PASSWORD = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("ENGINE_OAUTH_PASSWORD", "KSTime",  "String", "", false, out settingENGINE_OAUTH_PASSWORD);
            model.ENGINE_OAUTH_PASSWORDId = settingENGINE_OAUTH_PASSWORD.GuidModuleSetting;
            
           secModuleSetting settingENGINE_OAUTH_CLIENT_SECRET = null;
            model.ENGINE_OAUTH_CLIENT_SECRET = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("ENGINE_OAUTH_CLIENT_SECRET", "KSTime",  "String", "", false, out settingENGINE_OAUTH_CLIENT_SECRET);
            model.ENGINE_OAUTH_CLIENT_SECRETId = settingENGINE_OAUTH_CLIENT_SECRET.GuidModuleSetting;
            
           secModuleSetting settingENGINE_DEFINITION_ID = null;
            model.ENGINE_DEFINITION_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("ENGINE_DEFINITION_ID", "KSTime",  "String", "", false, out settingENGINE_DEFINITION_ID);
            model.ENGINE_DEFINITION_IDId = settingENGINE_DEFINITION_ID.GuidModuleSetting;
            
           secModuleSetting settingCONTAINER_DATOS_CLIENTE_ID = null;
            model.CONTAINER_DATOS_CLIENTE_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("CONTAINER_DATOS_CLIENTE_ID", "KSTime",  "String", "", false, out settingCONTAINER_DATOS_CLIENTE_ID);
            model.CONTAINER_DATOS_CLIENTE_IDId = settingCONTAINER_DATOS_CLIENTE_ID.GuidModuleSetting;
            
           secModuleSetting settingCONTAINER_DOCUMENTOS_ID = null;
            model.CONTAINER_DOCUMENTOS_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("CONTAINER_DOCUMENTOS_ID", "KSTime",  "String", "", false, out settingCONTAINER_DOCUMENTOS_ID);
            model.CONTAINER_DOCUMENTOS_IDId = settingCONTAINER_DOCUMENTOS_ID.GuidModuleSetting;
            
           secModuleSetting settingCONTAINER_DIRECCION_ID = null;
            model.CONTAINER_DIRECCION_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("CONTAINER_DIRECCION_ID", "KSTime",  "String", "", false, out settingCONTAINER_DIRECCION_ID);
            model.CONTAINER_DIRECCION_IDId = settingCONTAINER_DIRECCION_ID.GuidModuleSetting;
            
           secModuleSetting settingCONTAINER_DATOS_FINANCIEROS_ID = null;
            model.CONTAINER_DATOS_FINANCIEROS_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("CONTAINER_DATOS_FINANCIEROS_ID", "KSTime",  "String", "", false, out settingCONTAINER_DATOS_FINANCIEROS_ID);
            model.CONTAINER_DATOS_FINANCIEROS_IDId = settingCONTAINER_DATOS_FINANCIEROS_ID.GuidModuleSetting;
            
           secModuleSetting settingCONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID = null;
            model.CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID", "KSTime",  "String", "", false, out settingCONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID);
            model.CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_IDId = settingCONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID.GuidModuleSetting;
            
           secModuleSetting settingCONTAINER_BENEFICIARIOS_ID = null;
            model.CONTAINER_BENEFICIARIOS_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("CONTAINER_BENEFICIARIOS_ID", "KSTime",  "String", "", false, out settingCONTAINER_BENEFICIARIOS_ID);
            model.CONTAINER_BENEFICIARIOS_IDId = settingCONTAINER_BENEFICIARIOS_ID.GuidModuleSetting;
            
           secModuleSetting settingCONTAINER_CONTRATOS_ID = null;
            model.CONTAINER_CONTRATOS_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("CONTAINER_CONTRATOS_ID", "KSTime",  "String", "", false, out settingCONTAINER_CONTRATOS_ID);
            model.CONTAINER_CONTRATOS_IDId = settingCONTAINER_CONTRATOS_ID.GuidModuleSetting;
            
           secModuleSetting settingCONTAINER_APROBACION_ID = null;
            model.CONTAINER_APROBACION_ID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("CONTAINER_APROBACION_ID", "KSTime",  "String", "", false, out settingCONTAINER_APROBACION_ID);
            model.CONTAINER_APROBACION_IDId = settingCONTAINER_APROBACION_ID.GuidModuleSetting;
            
           secModuleSetting settingMAMBU_CONTRATO_TEMPLATEID = null;
            model.MAMBU_CONTRATO_TEMPLATEID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MAMBU_CONTRATO_TEMPLATEID", "KSTime",  "String", "", false, out settingMAMBU_CONTRATO_TEMPLATEID);
            model.MAMBU_CONTRATO_TEMPLATEIDId = settingMAMBU_CONTRATO_TEMPLATEID.GuidModuleSetting;
            
           secModuleSetting settingMAMBU_CARATULA_TEMPLATEID = null;
            model.MAMBU_CARATULA_TEMPLATEID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MAMBU_CARATULA_TEMPLATEID", "KSTime",  "String", "", false, out settingMAMBU_CARATULA_TEMPLATEID);
            model.MAMBU_CARATULA_TEMPLATEIDId = settingMAMBU_CARATULA_TEMPLATEID.GuidModuleSetting;
            
           secModuleSetting settingMAMBU_PAGARE_TEMPLATEID = null;
            model.MAMBU_PAGARE_TEMPLATEID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MAMBU_PAGARE_TEMPLATEID", "KSTime",  "String", "", false, out settingMAMBU_PAGARE_TEMPLATEID);
            model.MAMBU_PAGARE_TEMPLATEIDId = settingMAMBU_PAGARE_TEMPLATEID.GuidModuleSetting;
            
           secModuleSetting settingMAMBU_REFERENCIASPAGO_TEMPLATEID = null;
            model.MAMBU_REFERENCIASPAGO_TEMPLATEID = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MAMBU_REFERENCIASPAGO_TEMPLATEID", "KSTime",  "String", "", false, out settingMAMBU_REFERENCIASPAGO_TEMPLATEID);
            model.MAMBU_REFERENCIASPAGO_TEMPLATEIDId = settingMAMBU_REFERENCIASPAGO_TEMPLATEID.GuidModuleSetting;
            
           secModuleSetting settingMATI_AUTH_HEADER = null;
            model.MATI_AUTH_HEADER = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("MATI_AUTH_HEADER", "KSTime",  "String", "", false, out settingMATI_AUTH_HEADER);
            model.MATI_AUTH_HEADERId = settingMATI_AUTH_HEADER.GuidModuleSetting;
            
           secModuleSetting settingWEBBHOOK_MATI_KEY = null;
            model.WEBBHOOK_MATI_KEY = (String)SFS.Core.Configuration.ModuleAppSettings.GetValue("WEBBHOOK_MATI_KEY", "KSTime",  "String", "", false, out settingWEBBHOOK_MATI_KEY);
            model.WEBBHOOK_MATI_KEYId = settingWEBBHOOK_MATI_KEY.GuidModuleSetting;
          





            e.Items = new List<unProxySetting>();
            e.Items.Add(model);
            e.Cancel = true;
        }
		
          
        private void OnUpdatingAgileSettings(object sender, BusinessRulesEventArgs<unProxySetting> e)
        {
            Guid? guidCompanySFSPrincipal = Guid.Parse("59A9D643-C110-4247-9490-693CFD223F99");
            string coreModuleKey = "SFSCoreSecurity";
            //// SMTP Server
            secComModSetting companyModuleSetting = null;
            unProxySetting settingModel = e.Item;

            //var x = data.GetParam<JObject>("settingModel");
            //settingModel = x.ToObject<AppSettingsModel>();
			 secModuleSetting moduleSetting = new secModuleSetting();

            secModule moduleOverride = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey("KSTime");


            var companyModule = SFS.Core.Security.BR.secCompanyModulesBR.Instance.GetBy(p => p.secModule.ModuleKey == coreModuleKey && p.GuidCompany == guidCompanySFSPrincipal, e.ContextRequest).FirstOrDefault();
            if (companyModule != null)
            {
                companyModuleSetting = new secComModSetting();

              
				companyModuleSetting.GuidCompModSetting = settingModel.SMTPServerId.Value;
                companyModuleSetting.ValueString = settingModel.SMTPServer;
                secComModSettingsBR.Instance.UpdateAgile(companyModuleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToCompany(null, "SMTPServer", coreModuleKey, companyModule.secCompany.GuidCompany);


				companyModuleSetting.GuidCompModSetting = settingModel.SMTPSSLEnabledId.Value;
                companyModuleSetting.ValueBoolean = settingModel.SMTPSSLEnabled;
                secComModSettingsBR.Instance.UpdateAgile(companyModuleSetting, e.ContextRequest, "ValueBoolean");
                SFS.Core.Cache.Caching.SetToCompany(null, "SMTPSSLEnabled", coreModuleKey, companyModule.secCompany.GuidCompany);


				companyModuleSetting.GuidCompModSetting = settingModel.SMTPUserId.Value;
                companyModuleSetting.ValueString = settingModel.SMTPUser;
                secComModSettingsBR.Instance.UpdateAgile(companyModuleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToCompany(null, "SMTPUser", coreModuleKey, companyModule.secCompany.GuidCompany);


				companyModuleSetting.GuidCompModSetting = settingModel.SMTPPasswordId.Value;
                companyModuleSetting.ValueString = settingModel.SMTPPassword;
                secComModSettingsBR.Instance.UpdateAgile(companyModuleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToCompany(null, "SMTPPassword", coreModuleKey, companyModule.secCompany.GuidCompany);


				companyModuleSetting.GuidCompModSetting = settingModel.SMTPFromNameId.Value;
                companyModuleSetting.ValueString = settingModel.SMTPFromName;
                secComModSettingsBR.Instance.UpdateAgile(companyModuleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToCompany(null, "SMTPFromName", coreModuleKey, companyModule.secCompany.GuidCompany);


				companyModuleSetting.GuidCompModSetting = settingModel.SMTPPortId.Value;
                companyModuleSetting.ValueString = settingModel.SMTPPort;
                secComModSettingsBR.Instance.UpdateAgile(companyModuleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToCompany(null, "SMTPPort", coreModuleKey, companyModule.secCompany.GuidCompany);


				companyModuleSetting.GuidCompModSetting = settingModel.SMTPFromEmailId.Value;
                companyModuleSetting.ValueString = settingModel.SMTPFromEmail;
                secComModSettingsBR.Instance.UpdateAgile(companyModuleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToCompany(null, "SMTPFromEmail", coreModuleKey, companyModule.secCompany.GuidCompany);


            
			     moduleSetting.GuidModuleSetting = settingModel.AzureBlobStorageConnectionId.Value;
               moduleSetting.ValueString = settingModel.AzureBlobStorageConnection;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-AzureStorageConnectionString");
            
			     moduleSetting.GuidModuleSetting = settingModel.SaveBlobInAzureStorageId.Value;
               moduleSetting.ValueBoolean = settingModel.SaveBlobInAzureStorage;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueBoolean");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-save-files-blob");
            
			     moduleSetting.GuidModuleSetting = settingModel.SaveBlobInDataBaseId.Value;
               moduleSetting.ValueBoolean = settingModel.SaveBlobInDataBase;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueBoolean");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-save-files-db");
            
			     moduleSetting.GuidModuleSetting = settingModel.UserNameGeoNamesId.Value;
               moduleSetting.ValueString = settingModel.UserNameGeoNames;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-username-geonames");
            
			     moduleSetting.GuidModuleSetting = settingModel.EngineURLId.Value;
               moduleSetting.ValueString = settingModel.EngineURL;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-EngineURL");
            
			     moduleSetting.GuidModuleSetting = settingModel.ENGINE_API_KEYId.Value;
               moduleSetting.ValueString = settingModel.ENGINE_API_KEY;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-ENGINE_API_KEY");
            
			     moduleSetting.GuidModuleSetting = settingModel.MAMBU_URLId.Value;
               moduleSetting.ValueString = settingModel.MAMBU_URL;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MAMBU_URL");
            
			     moduleSetting.GuidModuleSetting = settingModel.MAMBU_USERId.Value;
               moduleSetting.ValueString = settingModel.MAMBU_USER;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MAMBU_USER");
            
			     moduleSetting.GuidModuleSetting = settingModel.MAMBU_PWDId.Value;
               moduleSetting.ValueString = settingModel.MAMBU_PWD;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MAMBU_PWD");
            
			     moduleSetting.GuidModuleSetting = settingModel.KM_MAXIMOId.Value;
               moduleSetting.ValueInt = settingModel.KM_MAXIMO;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueInt");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-km-maximo");
            
			     moduleSetting.GuidModuleSetting = settingModel.MAP_KEYId.Value;
               moduleSetting.ValueString = settingModel.MAP_KEY;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MAP_KEY");
            
			     moduleSetting.GuidModuleSetting = settingModel.ENGINE_OAUTH_CLIENT_IDId.Value;
               moduleSetting.ValueString = settingModel.ENGINE_OAUTH_CLIENT_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-ENGINE_OAUTH_CLIENT_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.ENGINE_OAUTH_LOGIN_URLId.Value;
               moduleSetting.ValueString = settingModel.ENGINE_OAUTH_LOGIN_URL;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-ENGINE_OAUTH_LOGIN_URL");
            
			     moduleSetting.GuidModuleSetting = settingModel.ENGINE_OAUTH_USERNAMEId.Value;
               moduleSetting.ValueString = settingModel.ENGINE_OAUTH_USERNAME;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-ENGINE_OAUTH_USERNAME");
            
			     moduleSetting.GuidModuleSetting = settingModel.ENGINE_OAUTH_PASSWORDId.Value;
               moduleSetting.ValueString = settingModel.ENGINE_OAUTH_PASSWORD;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-ENGINE_OAUTH_PASSWORD");
            
			     moduleSetting.GuidModuleSetting = settingModel.ENGINE_OAUTH_CLIENT_SECRETId.Value;
               moduleSetting.ValueString = settingModel.ENGINE_OAUTH_CLIENT_SECRET;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-ENGINE_OAUTH_CLIENT_SECRET");
            
			     moduleSetting.GuidModuleSetting = settingModel.ENGINE_DEFINITION_IDId.Value;
               moduleSetting.ValueString = settingModel.ENGINE_DEFINITION_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-ENGINE_DEFINITION_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.CONTAINER_DATOS_CLIENTE_IDId.Value;
               moduleSetting.ValueString = settingModel.CONTAINER_DATOS_CLIENTE_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-CONTAINER_DATOS_CLIENTE_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.CONTAINER_DOCUMENTOS_IDId.Value;
               moduleSetting.ValueString = settingModel.CONTAINER_DOCUMENTOS_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-CONTAINER_DOCUMENTOS_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.CONTAINER_DIRECCION_IDId.Value;
               moduleSetting.ValueString = settingModel.CONTAINER_DIRECCION_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-CONTAINER_DIRECCION_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.CONTAINER_DATOS_FINANCIEROS_IDId.Value;
               moduleSetting.ValueString = settingModel.CONTAINER_DATOS_FINANCIEROS_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-CONTAINER_DATOS_FINANCIEROS_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_IDId.Value;
               moduleSetting.ValueString = settingModel.CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.CONTAINER_BENEFICIARIOS_IDId.Value;
               moduleSetting.ValueString = settingModel.CONTAINER_BENEFICIARIOS_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-CONTAINER_BENEFICIARIOS_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.CONTAINER_CONTRATOS_IDId.Value;
               moduleSetting.ValueString = settingModel.CONTAINER_CONTRATOS_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-CONTAINER_CONTRATOS_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.CONTAINER_APROBACION_IDId.Value;
               moduleSetting.ValueString = settingModel.CONTAINER_APROBACION_ID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-CONTAINER_APROBACION_ID");
            
			     moduleSetting.GuidModuleSetting = settingModel.MAMBU_CONTRATO_TEMPLATEIDId.Value;
               moduleSetting.ValueString = settingModel.MAMBU_CONTRATO_TEMPLATEID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MAMBU_CONTRATO_TEMPLATEID");
            
			     moduleSetting.GuidModuleSetting = settingModel.MAMBU_CARATULA_TEMPLATEIDId.Value;
               moduleSetting.ValueString = settingModel.MAMBU_CARATULA_TEMPLATEID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MAMBU_CARATULA_TEMPLATEID");
            
			     moduleSetting.GuidModuleSetting = settingModel.MAMBU_PAGARE_TEMPLATEIDId.Value;
               moduleSetting.ValueString = settingModel.MAMBU_PAGARE_TEMPLATEID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MAMBU_PAGARE_TEMPLATEID");
            
			     moduleSetting.GuidModuleSetting = settingModel.MAMBU_REFERENCIASPAGO_TEMPLATEIDId.Value;
               moduleSetting.ValueString = settingModel.MAMBU_REFERENCIASPAGO_TEMPLATEID;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MAMBU_REFERENCIASPAGO_TEMPLATEID");
            
			     moduleSetting.GuidModuleSetting = settingModel.MATI_AUTH_HEADERId.Value;
               moduleSetting.ValueString = settingModel.MATI_AUTH_HEADER;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-MATI_AUTH_HEADER");
            
			     moduleSetting.GuidModuleSetting = settingModel.WEBBHOOK_MATI_KEYId.Value;
               moduleSetting.ValueString = settingModel.WEBBHOOK_MATI_KEY;
                secModuleSettingsBR.Instance.UpdateAgile(moduleSetting, e.ContextRequest, "ValueString");
                SFS.Core.Cache.Caching.SetToGlobal(null, moduleOverride.ModuleKey + "-WEBBHOOK_MATI_KEY");
          

        

              







                e.Cancel = true;

            }
        }


 	
		public List<unProxySetting> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<unProxySetting> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public unProxySetting GetByKey(Guid guidUnProxySetting)
        {
            return GetByKey(guidUnProxySetting, true);
        }
        public unProxySetting GetByKey(Guid guidUnProxySetting, bool loadIncludes)
        {
            unProxySetting item = null;
			var query = PredicateBuilder.True<unProxySetting>();
                    
			string strWhere = @"GuidUnProxySetting = Guid(""" + guidUnProxySetting.ToString()+@""")";
            Expression<Func<unProxySetting, bool>> predicate = null;
            //if (!string.IsNullOrEmpty(strWhere))
            //    predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<unProxySetting, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<unProxySetting> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<unProxySetting> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
		         public unProxySetting GetByKey(Guid guidUnProxySetting, params Expression<Func<unProxySetting, object>>[] includes)
        {
            unProxySetting item = null;
			string strWhere = @"GuidUnProxySetting = Guid(""" + guidUnProxySetting.ToString()+@""")";
          Expression<Func<unProxySetting, bool>> predicate = p=> p.GuidUnProxySetting == guidUnProxySetting;
           // if (!string.IsNullOrEmpty(strWhere))
           //     predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<unProxySetting, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public unProxySetting GetByKey(Guid guidUnProxySetting, string includes)
        {
            unProxySetting item = null;
			string strWhere = @"GuidUnProxySetting = Guid(""" + guidUnProxySetting.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public unProxySetting GetByKey(Guid guidUnProxySetting, string usemode, string includes)
		{
			return GetByKey(guidUnProxySetting, usemode, null, includes);

		 }
		 public unProxySetting GetByKey(Guid guidUnProxySetting, string usemode, ContextRequest context,  string includes)
        {
            unProxySetting item = null;
			string strWhere = @"GuidUnProxySetting = Guid(""" + guidUnProxySetting.ToString()+@""")";
			if (context == null){
				context = new ContextRequest();
				context.CustomQuery = new CustomQuery();
				context.CustomQuery.IsByKey = true;
				context.CustomQuery.FilterExpressionString = strWhere;
				context.UseMode = usemode;
			}
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate, ContextRequest contextRequest, params Expression<Func<unProxySetting, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFS.Core.Linq.Utils.IncludeToString<unProxySetting>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate, params Expression<Func<unProxySetting, object>>[] includes)
        {
		ContextRequest context = new ContextRequest();
		 context.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
				{
			/*if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }*/
			//ContextRequest context = new ContextRequest();
			            context.User = SFS.Core.My.Context.CurrentContext.User;
            context.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate, ContextRequest contextRequest, string includes)
		{
            using (EFContext con = new EFContext()) {
				
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				if (predicate == null) predicate = PredicateBuilder.True<unProxySetting>();
				string isDeletedField = null;
				Expression<Func<unProxySetting,bool>> notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					Expression<Func<unProxySetting,bool>> multitenantExpression = null;
 
                
                return GetBy(con, predicate, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression);

#region Old code
/*
				List<unProxySetting> result = null;
               BusinessRulesEventArgs<unProxySetting>  e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<unProxySetting>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<unProxySetting>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							 if (e.Items == null) e.Items = new List<unProxySetting>();
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
			

                if (predicate == null) predicate = PredicateBuilder.True<unProxySetting>();
                
                //var es = _repository.Queryable;

                IQueryable<unProxySetting> query =  con.unProxySettings.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
				query =query.AsExpandable().Where(predicate);
                query = ContextQueryBuilder<unProxySetting>.ApplyContextQuery(query, contextRequest);

                result = query.AsNoTracking().ToList<unProxySetting>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				//if (contextRequest != null ){
				//	 contextRequest = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
					contextRequest.CustomQuery = new CustomQuery();

				//}
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<unProxySetting>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
				*/
#endregion
            }
        }


		
		

        public List<unProxySetting> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
				


				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<unProxySetting>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetBy(con, predicateString, contextRequest, includes, fkIncludes, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression,computedFields);


	#region Old Code
	/*
				BusinessRulesEventArgs<unProxySetting> e = null;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString, contextRequest);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }
				 var includesList = (new List<string>());
                 if (!string.IsNullOrEmpty(includes))
                 {
                     includesList = includes.Split(char.Parse(",")).ToList();
                 }

				List<unProxySetting> result = new List<unProxySetting>();
         
			QueryBuild(predicateString, filter, con, contextRequest, "getby", includesList);
			 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }
				
				
					OnGetting(con, e == null ? e = new BusinessRulesEventArgs<unProxySetting>() { Filter = filter, ContextRequest = contextRequest  } : e );

                  //OnGetting(con,e = new BusinessRulesEventArgs<unProxySetting>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				


                //if (predicate == null) predicate = PredicateBuilder.True<unProxySetting>();
                
                //var es = _repository.Queryable;
				IQueryable<unProxySetting> query = con.unProxySettings.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
				//string predicateString = predicate.ToDynamicLinq<unProxySetting>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFS.Core.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
				bool includeAll = true; 
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

				includeAll = false; 
                }

				StringBuilder sbSelect = new StringBuilder();
                sbSelect.Append("new (");
                bool existPrev = false;
                foreach (var selected in contextRequest.CustomQuery.SelectedFields.Where(p=> !string.IsNullOrEmpty(p.Linq)))
                {
                    if (existPrev) sbSelect.Append(", ");
                    if (!selected.Linq.Contains(".") && !selected.Linq.StartsWith("it."))
                        sbSelect.Append("it." + selected.Linq);
                    else
                        sbSelect.Append(selected.Linq);
                    existPrev = true;
                }
                sbSelect.Append(")");
                var queryable = _queryable.Select(sbSelect.ToString());                    


     				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort)){
					if (queryOps.OrderBy.Contains(".") && !queryOps.OrderBy.StartsWith("it.")) queryOps.OrderBy = "it." + queryOps.OrderBy;
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
					}
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }


                var resultTemp = queryable.AsQueryable().ToListAsync().Result;
                foreach (var item in resultTemp)
                {

				   result.Add(SFS.Core.BR.Utils.GetConverted<unProxySetting,dynamic>(item, contextRequest.CustomQuery.SelectedFields.Select(p=>p.Name).ToArray()));
                }

			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<unProxySetting>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
	
	*/
	#endregion

            }
        }
		public unProxySetting GetFromOperation(string function, string filterString, string usemode, string fields, ContextRequest contextRequest)
        {
            using (EFContext con = new EFContext(contextRequest))
            {
                string computedFields = "";
               // string fkIncludes = "accContpaqiClassification,accProjectConcept,accProjectType,accProxyUser";
                List<string> multilangProperties = new List<string>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 

                return GetSummaryOperation(con, new unProxySetting(), function, filterString, usemode, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields, contextRequest, fields.Split(char.Parse(",")).ToArray());
            }
        }

   protected override void QueryBuild(string predicate, Filter filter, DbContext efContext, ContextRequest contextRequest, string method, List<string> includesList)
      	{
				if (contextRequest.CustomQuery.SpecificProperties.Count == 0)
                {
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPServer);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPSSLEnabled);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPUser);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPPassword);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPFromName);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPPort);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPFromEmail);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.AzureBlobStorageConnection);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SaveBlobInAzureStorage);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SaveBlobInDataBase);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.UserNameGeoNames);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.EngineURL);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_API_KEY);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_URL);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_USER);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_PWD);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.KM_MAXIMO);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAP_KEY);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_CLIENT_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_LOGIN_URL);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_USERNAME);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_PASSWORD);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_CLIENT_SECRET);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_DEFINITION_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_DATOS_CLIENTE_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_DOCUMENTOS_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_DIRECCION_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_DATOS_FINANCIEROS_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_BENEFICIARIOS_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_CONTRATOS_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_APROBACION_ID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_CONTRATO_TEMPLATEID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_CARATULA_TEMPLATEID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_PAGARE_TEMPLATEID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_REFERENCIASPAGO_TEMPLATEID);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MATI_AUTH_HEADER);
					contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.WEBBHOOK_MATI_KEY);
  

            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPServer);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPSSLEnabled);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPUser);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPPassword);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPFromName);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPPort);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SMTPFromEmail);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.AzureBlobStorageConnection);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SaveBlobInAzureStorage);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.SaveBlobInDataBase);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.UserNameGeoNames);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.EngineURL);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_API_KEY);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_URL);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_USER);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_PWD);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.KM_MAXIMO);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAP_KEY);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_CLIENT_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_LOGIN_URL);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_USERNAME);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_PASSWORD);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_OAUTH_CLIENT_SECRET);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.ENGINE_DEFINITION_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_DATOS_CLIENTE_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_DOCUMENTOS_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_DIRECCION_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_DATOS_FINANCIEROS_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_BENEFICIARIOS_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_CONTRATOS_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.CONTAINER_APROBACION_ID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_CONTRATO_TEMPLATEID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_CARATULA_TEMPLATEID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_PAGARE_TEMPLATEID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MAMBU_REFERENCIASPAGO_TEMPLATEID);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.MATI_AUTH_HEADER);
            
				
                contextRequest.CustomQuery.SpecificProperties.Add(unProxySetting.PropertyNames.WEBBHOOK_MATI_KEY);
                  
				}

				if (method == "getby" || method == "sum")
				{
					if (!contextRequest.CustomQuery.SpecificProperties.Contains("GuidUnProxySetting")){
						contextRequest.CustomQuery.SpecificProperties.Add("GuidUnProxySetting");
					}

					 if (!string.IsNullOrEmpty(contextRequest.CustomQuery.OrderBy))
					{
						string existPropertyOrderBy = contextRequest.CustomQuery.OrderBy;
						if (contextRequest.CustomQuery.OrderBy.Contains("."))
						{
							existPropertyOrderBy = contextRequest.CustomQuery.OrderBy.Split(char.Parse("."))[0];
						}
						if (!contextRequest.CustomQuery.SpecificProperties.Exists(p => p == existPropertyOrderBy))
						{
							contextRequest.CustomQuery.SpecificProperties.Add(existPropertyOrderBy);
						}
					}

				}
				
	bool isFullDetails = contextRequest.IsFromUI("unProxySettings", UIActions.GetForDetails,  contextRequest);
	string filterForTest = predicate  + filter.GetFilterComplete();

				if (isFullDetails || !string.IsNullOrEmpty(predicate))
            {
            } 

			if (method == "sum")
            {
            } 
			if (contextRequest.CustomQuery.SelectedFields.Count == 0)
            {
				foreach (var selected in contextRequest.CustomQuery.SpecificProperties)
                {
					string linq = selected;
					switch (selected)
                    {

					 
						
					 default:
                            break;
                    }
					contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name=selected, Linq=linq});
					if (method == "getby" || method == "sum")
					{
						if (includesList.Contains(selected))
							includesList.Remove(selected);

					}

				}
			}
				if (method == "getby" || method == "sum")
				{
					foreach (var otherInclude in includesList.Where(p=> !string.IsNullOrEmpty(p)))
					{
						contextRequest.CustomQuery.SelectedFields.Add(new SelectedField() { Name = otherInclude, Linq = "it." + otherInclude +" as " + otherInclude });
					}
				}
				BusinessRulesEventArgs<unProxySetting> e = null;
				if (contextRequest.PreventInterceptors == false)
					OnQuerySettings(efContext, e = new BusinessRulesEventArgs<unProxySetting>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

				//List<unProxySetting> result = new List<unProxySetting>();
                 if (e != null)
                {
                    contextRequest = e.ContextRequest;
                }

}
		public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate, int? pageSize, int? page, string orderBy, SFS.Core.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<unProxySetting> GetBy(Expression<Func<unProxySetting, bool>> predicate)
        {
			ContextRequest contextRequest = new ContextRequest();
			contextRequest.CustomQuery = new CustomQuery();
			if (!preventSecurityRestrictions)
			{
			//if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
              //  throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            //}
			contextRequest.CurrentContext = SFS.Core.My.Context.CurrentContext;
			            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
			}

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		protected override string GetSpecificFilter(string filter, ContextRequest contextRequest) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFS.Core.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
					
					
									
					sbSpec.Append(string.Format(@"SMTPServer.Contains(""{0}"")", word));
					

					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"SMTPUser.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"SMTPPassword.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"SMTPFromName.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"SMTPPort.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"SMTPFromEmail.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"AzureBlobStorageConnection.Contains(""{0}"")", word));
					

					
	
					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"UserNameGeoNames.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"EngineURL.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"ENGINE_API_KEY.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MAMBU_URL.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MAMBU_USER.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MAMBU_PWD.Contains(""{0}"")", word));
					

					
	
					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MAP_KEY.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"ENGINE_OAUTH_CLIENT_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"ENGINE_OAUTH_LOGIN_URL.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"ENGINE_OAUTH_USERNAME.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"ENGINE_OAUTH_PASSWORD.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"ENGINE_OAUTH_CLIENT_SECRET.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"ENGINE_DEFINITION_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"CONTAINER_DATOS_CLIENTE_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"CONTAINER_DOCUMENTOS_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"CONTAINER_DIRECCION_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"CONTAINER_DATOS_FINANCIEROS_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"CONTAINER_BENEFICIARIOS_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"CONTAINER_CONTRATOS_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"CONTAINER_APROBACION_ID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MAMBU_CONTRATO_TEMPLATEID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MAMBU_CARATULA_TEMPLATEID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MAMBU_PAGARE_TEMPLATEID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MAMBU_REFERENCIASPAGO_TEMPLATEID.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"MATI_AUTH_HEADER.Contains(""{0}"")", word));
					

					
					
										sbSpec.Append(" OR ");
					
									
					sbSpec.Append(string.Format(@"WEBBHOOK_MATI_KEY.Contains(""{0}"")", word));
					

					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<unProxySetting> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<unProxySetting> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<unProxySetting> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "SMTPServer";
            }
			//orderDir = "";
			SFS.Core.Data.SortDirection direction = SFS.Core.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFS.Core.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			
			if (context.UseMode == null  && usemode != null )
             context.UseMode = usemode;
             if (context.CustomQuery == null )
                context.CustomQuery =new SFS.Core.My.CustomQuery();

 
                context.CustomQuery.ExtraParams = extraParams;

                    context.CustomQuery.OrderBy = orderBy;
                   context.CustomQuery.SortDirection = direction;
                   context.CustomQuery.Page = page;
                  context.CustomQuery.PageSize = pageSize;
               

            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFS.Core.My.Context.CurrentContext != null &&  SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
					{
						context.User = SFS.Core.My.Context.CurrentContext.User;
						context.Company = SFS.Core.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<unProxySetting> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFS.Core.My.Context.CurrentContext.Company != null && SFS.Core.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                         contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<unProxySetting> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<unProxySetting> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        
 		 public unProxySetting Create(unProxySetting entity)
        {
				//ObjectContext context = null;
				////    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                  //  throw new Exception("Please, specific the contextRequest parameter in the method: Create");
               // }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

				return this.Create(entity, contextRequest);


        }
        
       
        public unProxySetting Create(unProxySetting entity, ContextRequest contextRequest)
        {
		
		bool graph = false;
	
				bool preventPartial = false;
                if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
               
			using (EFContext con = new EFContext()) {

				unProxySetting itemForSave = new unProxySetting();
#region Autos
		if(!preventSecurityRestrictions){

	
	


			}
#endregion
               BusinessRulesEventArgs<unProxySetting> e = null;
			    if (preventPartial == false )
                OnCreating(this,e = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, Item=entity });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidUnProxySetting == Guid.Empty)
                   {
                       entity.GuidUnProxySetting = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   itemForSave.GuidUnProxySetting = entity.GuidUnProxySetting;
				  
				//if (itemResult == null)
				//	itemResult = new unProxySetting();
					context = null;
                //if (e != null)
                //{
                 //   e.Item = itemResult;
                //}
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false )
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, Item = entity } : e);



                if (e != null && e.Item != null )
                {
                    return e.Item;
                }
                              return entity;
			}
            
        }
        //BusinessRulesEventArgs<unProxySetting> e = null;
        public void Create(List<unProxySetting> entities)
        {
			//	if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
        //    {
          //      throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            //}

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            Create(entities, contextRequest);
        }
        public void Create(List<unProxySetting> entities, ContextRequest contextRequest)
        
        {
			//ObjectContext context = null;
            	foreach (unProxySetting entity in entities)
				{
					this.Create(entity, contextRequest);
				}
        }
		  public void CreateOrUpdateBulk(List<unProxySetting> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "cu", contextRequest);
        }

        private void CreateOrUpdateBulk(List<unProxySetting> entities, string actionKey, ContextRequest contextRequest)
        {
			if (entities.Count() > 0){
            bool graph = false;

            bool preventPartial = false;
            if (contextRequest != null && contextRequest.PreventInterceptors == true)
            {
                preventPartial = true;
            }
            foreach (var entity in entities)
            {
                    if (entity.GuidUnProxySetting == Guid.Empty)
                   {
                       entity.GuidUnProxySetting = SFS.Core.Utilities.UUID.NewSequential();
					   
                   }
				   
				  


#region Autos
		if(!preventSecurityRestrictions){


 if (actionKey != "u")
                        {


}
	
	


			}
#endregion


		
			//entity.GuidUnProxySetting = entity.GuidUnProxySetting;

			//entity.SMTPServer = entity.SMTPServer;

			//entity.SMTPSSLEnabled = entity.SMTPSSLEnabled;

			//entity.SMTPUser = entity.SMTPUser;

			//entity.SMTPPassword = entity.SMTPPassword;

			//entity.SMTPFromName = entity.SMTPFromName;

			//entity.SMTPPort = entity.SMTPPort;

			//entity.SMTPFromEmail = entity.SMTPFromEmail;

			//entity.AzureBlobStorageConnection = entity.AzureBlobStorageConnection;

			//entity.SaveBlobInAzureStorage = entity.SaveBlobInAzureStorage;

			//entity.SaveBlobInDataBase = entity.SaveBlobInDataBase;

			//entity.UserNameGeoNames = entity.UserNameGeoNames;

			//entity.EngineURL = entity.EngineURL;

			//entity.ENGINE_API_KEY = entity.ENGINE_API_KEY;

			//entity.MAMBU_URL = entity.MAMBU_URL;

			//entity.MAMBU_USER = entity.MAMBU_USER;

			//entity.MAMBU_PWD = entity.MAMBU_PWD;

			//entity.KM_MAXIMO = entity.KM_MAXIMO;

			//entity.MAP_KEY = entity.MAP_KEY;

			//entity.ENGINE_OAUTH_CLIENT_ID = entity.ENGINE_OAUTH_CLIENT_ID;

			//entity.ENGINE_OAUTH_LOGIN_URL = entity.ENGINE_OAUTH_LOGIN_URL;

			//entity.ENGINE_OAUTH_USERNAME = entity.ENGINE_OAUTH_USERNAME;

			//entity.ENGINE_OAUTH_PASSWORD = entity.ENGINE_OAUTH_PASSWORD;

			//entity.ENGINE_OAUTH_CLIENT_SECRET = entity.ENGINE_OAUTH_CLIENT_SECRET;

			//entity.ENGINE_DEFINITION_ID = entity.ENGINE_DEFINITION_ID;

			//entity.CONTAINER_DATOS_CLIENTE_ID = entity.CONTAINER_DATOS_CLIENTE_ID;

			//entity.CONTAINER_DOCUMENTOS_ID = entity.CONTAINER_DOCUMENTOS_ID;

			//entity.CONTAINER_DIRECCION_ID = entity.CONTAINER_DIRECCION_ID;

			//entity.CONTAINER_DATOS_FINANCIEROS_ID = entity.CONTAINER_DATOS_FINANCIEROS_ID;

			//entity.CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID = entity.CONTAINER_ENVIO_SMS_CONSULTA_UNYKOO_ID;

			//entity.CONTAINER_BENEFICIARIOS_ID = entity.CONTAINER_BENEFICIARIOS_ID;

			//entity.CONTAINER_CONTRATOS_ID = entity.CONTAINER_CONTRATOS_ID;

			//entity.CONTAINER_APROBACION_ID = entity.CONTAINER_APROBACION_ID;

			//entity.MAMBU_CONTRATO_TEMPLATEID = entity.MAMBU_CONTRATO_TEMPLATEID;

			//entity.MAMBU_CARATULA_TEMPLATEID = entity.MAMBU_CARATULA_TEMPLATEID;

			//entity.MAMBU_PAGARE_TEMPLATEID = entity.MAMBU_PAGARE_TEMPLATEID;

			//entity.MAMBU_REFERENCIASPAGO_TEMPLATEID = entity.MAMBU_REFERENCIASPAGO_TEMPLATEID;

			//entity.MATI_AUTH_HEADER = entity.MATI_AUTH_HEADER;

			//entity.WEBBHOOK_MATI_KEY = entity.WEBBHOOK_MATI_KEY;

				
				


                
				

					 
				

				//itemResult = entity;
            }
            using (EFContext con = new EFContext())
            {
                 if (actionKey == "c")
                    {
                        context.BulkInsert(entities);
                    }else if ( actionKey == "u")
                    {
                        context.BulkUpdate(entities);
                    }else
                    {
                        context.BulkInsertOrUpdate(entities);
                    }
            }

			}
        }
	
		public void CreateBulk(List<unProxySetting> entities, ContextRequest contextRequest)
        {
            CreateOrUpdateBulk(entities, "c", contextRequest);
        }


		public void UpdateAgile(unProxySetting item, params string[] fields)
         {
			UpdateAgile(item, null, fields);
        }
		public void UpdateAgile(unProxySetting item, ContextRequest contextRequest, params string[] fields)
         {
            
             ContextRequest contextNew = null;
             if (contextRequest != null)
             {
                 contextNew = SFS.Core.My.Context.BuildContextRequestCopySafe(contextRequest);
               
             }

			 bool preventInterceptors = false;
            if (contextRequest?.PreventInterceptors == true)
            {
                preventInterceptors = true;
            }
			 BusinessRulesEventArgs<unProxySetting> e = null;
            if (preventInterceptors == false)
            {

			OnUpdatingAgile(this, e = new BusinessRulesEventArgs<unProxySetting>() { Item = item, ContextRequest = contextNew  });
			}
			 if (e != null)
            {
               
              
                if (e.Cancel)
                {
                    //context = null;
                    return ;

                }
            }
		   using (EFContext con = new EFContext())
            {


                UpdateAgile(item, con, contextNew, fields.ToList());
               
            }
			if (preventInterceptors == false)
            {
			OnUpdatedAgile(this, new BusinessRulesEventArgs<unProxySetting>() { Item = item, ContextRequest = contextNew  });
			}
         }
		public void UpdateBulk(List<unProxySetting>  items, params string[] fields)
         {
             SFS.Core.My.ContextRequest req = new SFS.Core.My.ContextRequest();
             req.CustomQuery = new SFS.Core.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }

		 public void DeleteBulk(List<unProxySetting> entities, ContextRequest contextRequest = null)
        {

            using (EFContext con = new EFContext())
            {
                foreach (var entity in entities)
                {
					var entityProxy = new unProxySetting() { GuidUnProxySetting = entity.GuidUnProxySetting };

                    con.Entry<unProxySetting>(entityProxy).State = EntityState.Deleted;

                }

                int result = con.SaveChanges();
                if (result != entities.Count)
                {
                    SFS.Core.My.EventLog.Error("Has been changed " + result.ToString() + " items but the expected value is: " + entities.Count.ToString());
                }
            }

        }

        public void UpdateBulk(List<unProxySetting> items, ContextRequest contextRequest)
        {
            if (items.Count() > 0){

			 foreach (var entity in items)
            {


#region Autos
		if(!preventSecurityRestrictions){

	



			}
#endregion



				}
				using (EFContext con = new EFContext())
				{

                    
                
                   con.BulkUpdate(items);

				}
             
			}	  
        }

         public unProxySetting Update(unProxySetting entity)
        {
           // if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            //{
           //     throw new Exception("Please, specific the contextRequest parameter in the method: Create");
//            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
            contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
       
         public unProxySetting Update(unProxySetting entity, ContextRequest contextRequest)
        {
		 //if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
           // {
             //   throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            //}
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            }

			
				unProxySetting  itemResult = null;

	

			 using( EFContext con = new EFContext()){
				BusinessRulesEventArgs<unProxySetting> e = null;
				bool preventPartial = false; 
				if (contextRequest != null && contextRequest.PreventInterceptors == true )
                {
                    preventPartial = true;
                } 
				if (preventPartial == false)
                OnUpdating(this,e = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, Item=entity});
				   if (e != null) {
						if (e.Cancel)
						{
							//outcontext = null;
							return e.Item;

						}
					}
				if (itemResult == null)
					itemResult = new unProxySetting();
					//outcontext= null;
				if(preventPartial == false)
					OnUpdated(this, e = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, Item=itemResult });

              	return itemResult;
			}
			  
        }
        public unProxySetting Save(unProxySetting entity)
        {
			return Create(entity);
        }
        public int Save(List<unProxySetting> entities)
        {
			 Create(entities);
            return entities.Count;

        }
        #endregion
        #region Delete
        public void Delete(unProxySetting entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(unProxySetting entity, ContextRequest contextRequest)
        {
				
				  List<unProxySetting> entities = new List<unProxySetting>();
				   entities.Add(entity);
				this.Delete(entities, contextRequest);
			
        }

         public void Delete(string query, Guid[] guids, ContextRequest contextRequest)
        {
			var br = new unProxySettingsBR();
            var items = br.GetBy(query, null, null, null, null, null, contextRequest, guids);
            
            Delete(items, contextRequest);

        }
        public void Delete(unProxySetting entity,  ContextRequest contextRequest, BusinessRulesEventArgs<unProxySetting> e = null)
        {
			
				using(EFContext con = new EFContext())
                 {
				
               	BusinessRulesEventArgs<unProxySetting> _e = null;
               List<unProxySetting> _items = new List<unProxySetting>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
					if (e != null)
                    {
                        e.Item = entity;
                    }
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, Item = entity, Items = null  } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				
								
				con.Entry<unProxySetting>(entity).State = EntityState.Deleted;
				con.SaveChanges();
				 
                				
				
				 
					
					
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, Item = entity, Items = null };

                    OnDeleted(this, _e);
                }

				//return null;
			}
        }
        public void Delete(List<unProxySetting> entities,  ContextRequest contextRequest = null )
        {
				
			 BusinessRulesEventArgs<unProxySetting> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, Item = null, Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<unProxySetting> eToChilds = new BusinessRulesEventArgs<unProxySetting>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (unProxySetting item in entities)
				{
					try
                    {
                        this.Delete(item, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFS.Core.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = null, Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<unProxySetting, bool>> predicate)
        {
				///if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                   // throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                //}

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<unProxySetting, bool>> predicate, ContextRequest contextRequest)
        {


			
            BusinessRulesEventArgs<unProxySetting> e = null;
            OnCounting(this, e = new BusinessRulesEventArgs<unProxySetting>() { ContextRequest = contextRequest, FilterExpression = predicate });
            if (e != null)
            {
                if (e.Cancel)
                {
                    return e.CountResult;
                }
            }
            return 0;

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
		/*		if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }
				*/
                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
		 /*
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }*/

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFS.Core.My.Context.CurrentContext.User;
                contextRequest.Company = SFS.Core.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){

		using (EFContext con = new EFContext()) {
				string computedFields = "";
				string fkIncludes = "";
                List<string> multilangProperties = new List<string>();
				//if (predicate == null) predicate = PredicateBuilder.True<unProxySetting>();
				string isDeletedField = null;
				string notDeletedExpression = null;
					bool sharedAndMultiTenant = false;
					string multiTenantField = null; 
					string multitenantExpression = null;
 
                
                return GetCount(con, predicate, usemode, contextRequest, multilangProperties, multiTenantField, isDeletedField, sharedAndMultiTenant, notDeletedExpression, multitenantExpression, computedFields);

			}
			#region old code
			 /* string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate, contextRequest));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];

				  if (!string.IsNullOrEmpty(freetext) && string.IsNullOrEmpty(contextRequest.FreeText))
                  {
                      contextRequest.FreeText = freetext;
                  }
              }
              else {
                  filter.ProcessText(predicate);
              }
			   predicate = filter.GetFilterComplete();
			// BusinessRulesEventArgs<unProxySetting>  e = null;
           	using (EFContext con = new EFContext())
			{
			
			

			 QueryBuild(predicate, filter, con, contextRequest, "count", new List<string>());


			
			BusinessRulesEventArgs<unProxySetting> e = null;

			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<unProxySetting>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			
			StringBuilder sbQuerySystem = new StringBuilder();
		
		
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFS.Core.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.unProxySettings.Where(predicate).Count();
					
                }else
                    return con.unProxySettings.Count();
					
			}*/
			#endregion

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         


     

		 public void UpdateAssociation(string relation, string relationValue, string query, Guid[] ids, ContextRequest contextRequest)
        {
            var items = GetBy(query, null, null, null, null, null, contextRequest, ids);
			 var module = SFS.Core.Cache.Caching.SystemObjects.GetModuleByKey(SFS.Core.Web.Utils.GetRouteDataOrQueryParam(contextRequest.ContextAccessor, "area"));
           
            foreach (var item in items)
            {
			  Guid ? guidRelationValue = null ;
                if (!string.IsNullOrEmpty(relationValue)){
                    guidRelationValue = Guid.Parse(relationValue );
                }

				 if (relation.Contains("."))
                {
                    var partsWithOtherProp = relation.Split(char.Parse("|"));
                    var parts = partsWithOtherProp[0].Split(char.Parse("."));

                    string proxyRelName = parts[0];
                    string proxyProperty = parts[1];
                    string proxyPropertyKeyNameFromOther = partsWithOtherProp[1];
                    //string proxyPropertyThis = parts[2];

                    var prop = item.GetType().GetProperty(proxyRelName);
                    //var entityInfo = //SFS.Core.
                    // descubrir el tipo de entidad dentro de la colección
                    Type typeEntityInList = SFS.Core.Entities.Utils.GetTypeFromList(prop);
                    var newProxyItem = Activator.CreateInstance(typeEntityInList);
                    var propThisForSet = newProxyItem.GetType().GetProperty(proxyProperty);
                    var entityInfoOfProxy = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(typeEntityInList);
                    var propOther = newProxyItem.GetType().GetProperty(proxyPropertyKeyNameFromOther);

                    if (propThisForSet != null && entityInfoOfProxy != null && propOther != null )
                    {
                        var entityInfoThis = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(item.GetType());
                        var valueThisId = item.GetType().GetProperty(entityInfoThis.PropertyKeyName).GetValue(item);
                        if (valueThisId != null)
                            propThisForSet.SetValue(newProxyItem, valueThisId);
                        propOther.SetValue(newProxyItem, Guid.Parse(relationValue));
                        
                        var entityNameProp = newProxyItem.GetType().GetField("EntityName").GetValue(null);
                        var entitySetNameProp = newProxyItem.GetType().GetField("EntitySetName").GetValue(null);

                        SFS.Core.Apps.Integration.CreateItemFromApp(entityNameProp.ToString(), entitySetNameProp.ToString(), module.ModuleNamespace, newProxyItem, contextRequest);

                    }

                    // crear una instancia del tipo de entidad
                    // llenar los datos y registrar nuevo


                }
                else
                {
                var prop = item.GetType().GetProperty(relation);
                var entityInfo = SFS.Core.Common.Entities.Metadata.MetadataAttributes.GetMyAttribute<SFS.Core.Common.Entities.Metadata.EntityInfoAttribute>(prop.PropertyType);
                if (entityInfo != null)
                {
                    var ins = Activator.CreateInstance(prop.PropertyType);
                   if (guidRelationValue != null)
                    {
                        prop.PropertyType.GetProperty(entityInfo.PropertyKeyName).SetValue(ins, guidRelationValue);
                        item.GetType().GetProperty(relation).SetValue(item, ins);
                    }
                    else
                    {
                        item.GetType().GetProperty(relation).SetValue(item, null);
                    }

                    Update(item, contextRequest);
                }

				}
            }
        }
	

				
	}
	 
}



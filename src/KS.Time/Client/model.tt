<#@ output  extension="ts" #>
<#@ template language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="SFS.VSExtension2019.Model" #>
<#@ import namespace="SFS.VSExtension2019.Model.Utils" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>

<#+ public void GenerateModel(EntityInfo entity)
{ #>
<#+	

#>
import { FormlyFieldConfig } from '@ngx-formly/core';
import { ChildRelation } from '../common/page.model';

<#+ List<String> propModels = new List<String>();
	
	foreach (var property in entity.Properties.Where(p=> p.IsNavigationPropertyMany == false && p.IsNavigationProperty == true ) ){ 
			var navprop = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== property.Name);
			var entityRelName = navprop.EntityType.Split(char.Parse("."))[navprop.EntityType.Split(char.Parse(".")).Length -1];
			var entityRel  = entity.Model.Entities.Find(p=>p.Name == entityRelName);
		if (!propModels.Contains(entityRel.Name) && entityRel.Name != entity.Name){
			propModels.Add(entityRel.Name);
#>
import { <#= entityRel.Name #>Model } from './<#=entityRel.Name #>.model';
<#+
        }
    }
#>
	



 class <#= entity.Name #>PropertyNames{
	constructor(){}
	//axd
<#+ foreach(var prop in entity.Properties.Where(p=> !string.IsNullOrEmpty((string)GetCustomProperty(p, "IsParam", "String")) )){	 #>
	 <#= prop.Name #>Id:string = "<#= prop.Name #>";	
<#+ } #>
<#+		foreach (var property in entity.Properties.Where(p=> IsPropertyWritable(p) && p.IsNavigationPropertyMany == false))
        {
			string type = "string";
			
#>
<#+  if (property.IsNavigationProperty == false){  #>
	<#= property.Name #>:<#= type #> = "<#= property.Name #>";	

				 
<#+	}else{	#>
		Fk<#= property.Name #>:<#= type #> = "Fk<#= property.Name #>";
		<#= property.Name #>:<#= type #> = "<#= property.Name #>"; //test
<#+	     } #>				 
<#+      } #>
}

//test
export  class <#= entity.Name #>Model{

    public static GetChildren(){
		let results:Array<ChildRelation> = [];
<#+ foreach (var property in entity.Properties.Where(p=> p.IsNavigationPropertyMany == true  ) ){ 
						var navprop = entity.NavigationProperties.FirstOrDefault(p=>p.PropertyName== property.Name);
						var entityRelName = navprop.EntityType.Split(char.Parse("."))[navprop.EntityType.Split(char.Parse(".")).Length -1];
						var entityRel = entity.Model.Entities.Find(p=>p.Name == entityRelName);
						
						// 
						var relNav = entityRel.NavigationProperties.Where(p=>p.RelationshipName == property.NavigationProperty.RelationshipName && p.ToRole != property.NavigationProperty.ToRole).FirstOrDefault();
						var relPropertyName = relNav.PropertyRefName;

#>
        results.push({
            Name: "<#=property.Name#>",
            FkPropertyName: "<#=relPropertyName#>",
            Label: "<#=property.Name#>",
            EntityName: "<#=entityRelName#>"
        });
<#+ } #>
		return results;
	}
public static GetFields():Array<FormlyFieldConfig>{
return [
<#+ foreach (var property in entity.Properties.Where(p=> p.IsNavigationProperty == false && p.IsPrimaryKey == false ) ){ 

	if (IsSystemProperty(property)  == false  ){
	string typeData = "string";
	if (property.Type.ToLower().Contains("int") || property.Type.ToLower().Contains("decimal") || property.Type.ToLower().Contains("float") || property.Type.ToLower().Contains("double")){
		typeData = "number";
    }
	string required = "false";
	if (property.Nullable == false){
		required = "true";
    }

	string typeControl = "input";
	var navigationProp =  entity.NavigationProperties.FirstOrDefault( p=>p.PropertyRefName == property.Name && (p.Multiplicity == "1" || p.Multiplicity == "0..1")); 
	PropertyInfo navPropertyKey = null;
	PropertyInfo navDefaultProperty = null;
	PropertyInfo navProp = null;
	EntityInfo entityRel = null;
	string entityRelName = null;
	if (navigationProp != null ){
		typeControl = "select";
		entityRelName = navigationProp.EntityType.Split(char.Parse("."))[navigationProp.EntityType.Split(char.Parse(".")).Length -1];
		entityRel = entity.Model.Entities.Find(p=>p.Name == entityRelName);
		navPropertyKey = entityRel.Properties.FirstOrDefault(p=>p.IsPrimaryKey == true);
		navDefaultProperty = entityRel.Properties.FirstOrDefault(p=>p.Name == entityRel.DefaultProperty);
    } 
	if (property.Type.ToLower().Contains("bool")){
		typeControl = "checkbox";
		required = "false";
    }
	if (property.Type.ToLower().Contains("date")){
		//typeControl = "datepicker";
		typeControl = "datepicker";
    }

	string extra ="";
	string maxL= "";
	if (property.MaxLength == 0  && property.Type.ToLower().Contains("string") && !property.Type.ToLower().Contains("guid")  && !property.Type.ToLower().Contains("date") ){
			typeControl = "textarea";
			extra= "rows: 5,";
    }else{
		maxL = property.MaxLength.ToString();
    }
#>
{
    key: <#= entity.Name #>Model.PropertyNames.<#= property.Name #>,
    type: '<#= typeControl #>',

    templateOptions: {
	<#+ if (property.Type.ToLower().Contains("bool")){ #> 
	indeterminate: false,
<#+ } #>

<#+
if (entityRel != null ){
System.Text.StringBuilder sbParents = new System.Text.StringBuilder();

 foreach( var rel in entityRel.Properties.Where(p=> p.IsNavigationProperty == true && p.IsNavigationPropertyMany == false)){
	if (sbParents.Length > 0){
		sbParents.Append(";");
	}
	var navRel = entityRel.NavigationProperties.FirstOrDefault(p=> p.PropertyName == rel.Name);
	if (navRel != null){
		var entityRelRelName = navRel.EntityType.Split(char.Parse("."))[navRel.EntityType.Split(char.Parse(".")).Length -1];
		var relRel = entity.Model.Entities.FirstOrDefault(p=> p.Name == entityRelRelName);
		var navRelKey = relRel.Properties.FirstOrDefault(p=>p.IsPrimaryKey == true);

		sbParents.Append(navRel.PropertyRefName + ":" + entityRelRelName + "." + navRelKey.Name);
	}	
 }

if (sbParents.Length > 0 ){ #>
	"parents": "<#=sbParents.ToString()#>",	
	  //"parents": "GuidProject:KstProject.GuidProject;GuidActivityType:KstActivityType.GuidActivityType",
<#+ } 

}#>
<#+ if (navigationProp != null ){ #>
	
	  "relation": {
			PropertyRelationName: "<#= navigationProp.PropertyName #>",
			EntityModel: <#= entityRel.Name #>Model,  
			DataValue: <#= entityRel.Name #>Model.PropertyNames.<#= navPropertyKey.Name #>,
            DataText: <#= entityRel.Name #>Model.PropertyNames.<#= navDefaultProperty.Name #> 
			},
<#+ } #>
<#+ if (!string.IsNullOrEmpty((string)GetCustomProperty(property, "ComputedLinq", "String")) ){ #>
	  isComputed: true,
	  isManuallySetted: false,
<#+ } #>

        label: <#= entity.Name #>Model.PropertyNames.<#= property.Name #>,
        placeholder: '',
        required: <#= required #>,
		<#= extra #>
<#+ if (typeData != "string"){ #>
        type: "<#= typeData #>",
<#+ }else if (!string.IsNullOrEmpty(maxL) && maxL != "0"){ #>
		maxLength: <#= maxL #>,
<#+ } #>
    }
},
<#+    }
    }
#>
	];
    }
	Id?:string;

	<#+ foreach(var prop in entity.Properties.Where(p=> !string.IsNullOrEmpty((string)GetCustomProperty(p, "IsParam", "String")) )){	 #>
	 <#= prop.Name #>Id: string;
<#+ } #>

<#+		foreach (var property in entity.Properties.Where(p=> IsPropertyWritable(p) && p.IsNavigationPropertyMany == false))
        {
			string type = "string";
			string valueStr = "";
			if (property.Type.ToLower().Contains("int") || property.Type.ToLower().Contains("dec")  ){
				type = "number";
            }else if (property.Type.ToLower().Contains("bool")){
				type = "boolean";
				valueStr = " = false";
			}
#>
<#+  if (property.IsNavigationProperty == false){ 
		 string nullableSymbol = "";
		 if (property.Nullable == true){
			 nullableSymbol= "?";
         }
#>
	<#= property.Name #><#= nullableSymbol #>:<#= type #><#=valueStr#>;	

<#+	}else if (property.IsPrimaryKey ){	#>
			 
<#+	}else{	#>
		Fk<#= property.Name #>:<#= type #> ;

		Fk<#= property.Name #>Text:any;

		<#= property.Name #>:<#= type #>;
		
			 
<#+      } #>		 
<#+      } #>

	public static _EntitySetName:string =  "<#= entity.SetName #>";
	public static _EntityName:string =  "<#= entity.Name #>";
	public static PropertyNames: <#= entity.Name #>PropertyNames = new <#= entity.Name #>PropertyNames();
<#+ 
	System.Text.StringBuilder sbProps = new System.Text.StringBuilder();
	foreach(var prop in entity.Properties.Where(p=> p.IsNavigationProperty == false)){
		if (sbProps.Length > 0) sbProps.Append(",");
		sbProps.Append(prop.Name);
    }
#>
	public static _PropertyNamesForUpdate: string = "<#= sbProps.ToString() #>";

	public static _DefaultProperty: string= "<#=entity.DefaultProperty#>";

	public get getSetName() : string {
		return <#= entity.Name #>Model._EntitySetName;
	}
	public get getPropertyNames() : <#= entity.Name #>PropertyNames {
		return <#= entity.Name #>Model.PropertyNames;
	}
}


	
<#+		 
    
            
}
#>


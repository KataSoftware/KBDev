{"version":3,"sources":["./src/app/services/common/sfs.service.ts"],"names":[],"mappings":"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","file":"default~KstEmailTemplates-KstEmailTemplate-form-KstEmailTemplate-form-module~KstEmailTemplates-KstEm~5e6c6341.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpService, DataService, EntityWrapper, ApiResponse, ServiceData, IGeoData } from 'sfscommon';\nimport { FieldSettings, SeparatorSettings, ControlTypes, FieldTypes } from 'src/app/pages/common/app-form-base/app-form-base.page';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\n// import { FormlyFieldConfig } from '@ngx-formly/core';\n// import { FieldSettings } from 'src/app/pages/common/app-form-base/app-form-base.page';\n\n@Injectable({ providedIn: 'root' })\nexport class sfsService {\n  url: string;\n  constructor(public http: HttpService, public dataService: DataService) {\n    this.url = http.generateUrl();\n  }\n  private NavigationData?:any=null;\n  public GetNavigationData():any{\n    return this.NavigationData;\n  }\n  public SetNavigationData(data:any){\n    console.log('SetNavigationData', data);\n    this.NavigationData=data;\n  }\n  public async  Create(entity: any, setName: any) {\n\n    return this.dataService.create({ EntitySet: setName,OverrideAppNameKey: \"KSTime\",  RestServiceAppKey: \"SFSCoreSecurity\", Item: entity });\n  }\n  public async  Delete(ItemKeys: Array<string>, setName: any) {\n\n    return this.dataService.delete({ EntitySet: setName,OverrideAppNameKey: \"KSTime\", RestServiceAppKey: \"SFSCoreSecurity\", ItemKeys: ItemKeys });\n  }\n\n  public async  Update(entity: any, setName: any, fields?: any) {\n\n    return this.dataService.update({ EntitySet: setName, OverrideAppNameKey: \"KSTime\", RestServiceAppKey: \"SFSCoreSecurity\", Item: entity, Fields: fields });\n  }\n\n  public async  GetItem(id: any, setName: any): Promise<ApiResponse<any>> {\n\n    let result = await this.dataService.get({ EntitySet: setName, OverrideAppNameKey: \"KSTime\",   RestServiceAppKey: \"SFSCoreSecurity\", ItemKey: id });\n    return result;\n  }\n  public async  Get( serviceData: ServiceDataOptions) {\n    serviceData.RestServiceAppKey = \"SFSCoreSecurity\";\n    serviceData.OverrideAppNameKey = \"KSTime\";\n    return   this.dataService.get(serviceData);\n  \n  }\n \n\n\n  public async  IsEmailAvailable(email: any) {\n\n    const requestParams = await this.http.generateFullParamsRequest();\n    //data[\"OverrideAppNameKey\"] = \"KSTime\";\n    const data = {\n      OverrideAppNameKey: \"KSTime\",\n      Email: email\n    };\n\n    const response = await this.http.post(`${requestParams.url}/Auth/IsEmailAvailable`, data, requestParams.headers);\n    if (response.status = \"success\") {\n      if (response.reason == \"email-available\") {\n        return true;\n      } else {\n        return false;\n\n      }\n    } else {\n      return false;\n    }\n  }\n\n  \n\n\n  public async  CustomMethod(params?: any, setName?:string, actionMethod?:string):Promise<ApiResponse<any>>{\n\n    const requestParams = await this.http.generateFullParamsRequest();\n    requestParams.data[\"OverrideAppNameKey\"] = \"KSTime\";\n    requestParams.data.Params = params;\n\n    const response = await this.http.post(`${requestParams.url}/SFSCoreSecurity/${setName}/${actionMethod}`, requestParams.data, requestParams.headers);\n    \n    return response;\n  }\n\n  public async  RecoveryPassword(email?:string, appKey?:string):Promise<ApiResponse<any>>{\n\n    const requestParams = await this.http.generateFullParamsRequest();\n    requestParams.data[\"OverrideAppNameKey\"] = \"KSTime\";\n    requestParams.data[\"AppKey\"] = \"KSTime\";\n    requestParams.data[\"Email\"] = email;\n    //requestParams.data.Params = params;\n\n    const response = await this.http.post(`${requestParams.url}/Auth/RecoveryPassword`, requestParams.data, requestParams.headers);\n    \n    return response;\n  }\n\n  async getRolesOfUser(guidUser:string, guidCompany?:string){\n    let serviceData = new ServiceDataOptions();\n    serviceData.AppNameKey = \"SFSCoreSecurity\";\n    serviceData.OverrideAppNameKey = \"KSTime\";\n    serviceData.Query = `it.GuidUser = Guid(\"${guidUser}\") AND it.GuidCompany = Guid(\"${guidCompany}\") AND it.secModule.ModuleKey = \"KSTime\"`;\n    serviceData.EntitySet = \"secUserCompanies\";\n    serviceData.Fields  = \"GuidRole,GuidCompany,GuidModule,GuidUser\";\n    serviceData.AllFields = true ;\n    let response = await this.Get( serviceData );\n    return response;\n  }  \n\n  public async  SetPassword(email?:string, code?:string, password?:string, appKey?:string):Promise<ApiResponse<any>>{\n\n    const requestParams = await this.http.generateFullParamsRequest();\n    requestParams.data[\"OverrideAppNameKey\"] = \"KSTime\";\n    requestParams.data[\"AppKey\"] = \"KSTime\";\n    requestParams.data[\"Email\"] = email;\n    requestParams.data[\"Username\"] = email;\n    requestParams.data[\"Code\"] = code;\n    requestParams.data[\"UseCode\"] = true;\n    requestParams.data[\"Password\"] = password;\n    requestParams.data[\"NewPassword\"] = password;\n    //requestParams.data.Params = params;\n\n    const response = await this.http.post(`${requestParams.url}/Auth/ChangePassword`, requestParams.data, requestParams.headers);\n    \n    return response;\n  }\n\n\n  public async  ActivateAccount(email?:string, code?:string,   appKey?:string):Promise<ApiResponse<any>>{\n\n    const requestParams = await this.http.generateFullParamsRequest();\n    requestParams.data[\"OverrideAppNameKey\"] = \"KSTime\";\n    requestParams.data[\"AppKey\"] = \"KSTime\";\n    requestParams.data[\"Email\"] = email;\n    requestParams.data[\"Username\"] = email;\n    requestParams.data[\"Code\"] = code;\n    requestParams.data[\"UseCode\"] = true;\n   \n    //requestParams.data.Params = params;\n\n    const response = await this.http.post(`${requestParams.url}/Auth/ActivateAccount`, requestParams.data, requestParams.headers);\n    \n    return response;\n  }\n  \n  \n}\nexport class ServiceDataOptions extends ServiceData {\n    EntityModel?:any=null;\n}\n\n"],"sourceRoot":"webpack:///"}